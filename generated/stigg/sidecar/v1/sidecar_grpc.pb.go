// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: stigg/sidecar/v1/sidecar.proto

package sidecarv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SidecarService_GetEntitlements_FullMethodName       = "/stigg.sidecar.v1.SidecarService/GetEntitlements"
	SidecarService_GetBooleanEntitlement_FullMethodName = "/stigg.sidecar.v1.SidecarService/GetBooleanEntitlement"
	SidecarService_GetNumericEntitlement_FullMethodName = "/stigg.sidecar.v1.SidecarService/GetNumericEntitlement"
	SidecarService_GetMeteredEntitlement_FullMethodName = "/stigg.sidecar.v1.SidecarService/GetMeteredEntitlement"
	SidecarService_ReportUsage_FullMethodName           = "/stigg.sidecar.v1.SidecarService/ReportUsage"
	SidecarService_ReportEvents_FullMethodName          = "/stigg.sidecar.v1.SidecarService/ReportEvents"
	SidecarService_ReloadEntitlements_FullMethodName    = "/stigg.sidecar.v1.SidecarService/ReloadEntitlements"
)

// SidecarServiceClient is the client API for SidecarService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SidecarServiceClient interface {
	GetEntitlements(ctx context.Context, in *GetEntitlementsRequest, opts ...grpc.CallOption) (*GetEntitlementsResponse, error)
	GetBooleanEntitlement(ctx context.Context, in *GetBooleanEntitlementRequest, opts ...grpc.CallOption) (*GetBooleanEntitlementResponse, error)
	GetNumericEntitlement(ctx context.Context, in *GetNumericEntitlementRequest, opts ...grpc.CallOption) (*GetNumericEntitlementResponse, error)
	GetMeteredEntitlement(ctx context.Context, in *GetMeteredEntitlementRequest, opts ...grpc.CallOption) (*GetMeteredEntitlementResponse, error)
	ReportUsage(ctx context.Context, in *ReportUsageRequest, opts ...grpc.CallOption) (*ReportUsageResponse, error)
	ReportEvents(ctx context.Context, in *ReportEventsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ReloadEntitlements(ctx context.Context, in *ReloadEntitlementsRequest, opts ...grpc.CallOption) (*ReloadEntitlementsResponse, error)
}

type sidecarServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSidecarServiceClient(cc grpc.ClientConnInterface) SidecarServiceClient {
	return &sidecarServiceClient{cc}
}

func (c *sidecarServiceClient) GetEntitlements(ctx context.Context, in *GetEntitlementsRequest, opts ...grpc.CallOption) (*GetEntitlementsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEntitlementsResponse)
	err := c.cc.Invoke(ctx, SidecarService_GetEntitlements_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sidecarServiceClient) GetBooleanEntitlement(ctx context.Context, in *GetBooleanEntitlementRequest, opts ...grpc.CallOption) (*GetBooleanEntitlementResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBooleanEntitlementResponse)
	err := c.cc.Invoke(ctx, SidecarService_GetBooleanEntitlement_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sidecarServiceClient) GetNumericEntitlement(ctx context.Context, in *GetNumericEntitlementRequest, opts ...grpc.CallOption) (*GetNumericEntitlementResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetNumericEntitlementResponse)
	err := c.cc.Invoke(ctx, SidecarService_GetNumericEntitlement_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sidecarServiceClient) GetMeteredEntitlement(ctx context.Context, in *GetMeteredEntitlementRequest, opts ...grpc.CallOption) (*GetMeteredEntitlementResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMeteredEntitlementResponse)
	err := c.cc.Invoke(ctx, SidecarService_GetMeteredEntitlement_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sidecarServiceClient) ReportUsage(ctx context.Context, in *ReportUsageRequest, opts ...grpc.CallOption) (*ReportUsageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReportUsageResponse)
	err := c.cc.Invoke(ctx, SidecarService_ReportUsage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sidecarServiceClient) ReportEvents(ctx context.Context, in *ReportEventsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SidecarService_ReportEvents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sidecarServiceClient) ReloadEntitlements(ctx context.Context, in *ReloadEntitlementsRequest, opts ...grpc.CallOption) (*ReloadEntitlementsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReloadEntitlementsResponse)
	err := c.cc.Invoke(ctx, SidecarService_ReloadEntitlements_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SidecarServiceServer is the server API for SidecarService service.
// All implementations must embed UnimplementedSidecarServiceServer
// for forward compatibility.
type SidecarServiceServer interface {
	GetEntitlements(context.Context, *GetEntitlementsRequest) (*GetEntitlementsResponse, error)
	GetBooleanEntitlement(context.Context, *GetBooleanEntitlementRequest) (*GetBooleanEntitlementResponse, error)
	GetNumericEntitlement(context.Context, *GetNumericEntitlementRequest) (*GetNumericEntitlementResponse, error)
	GetMeteredEntitlement(context.Context, *GetMeteredEntitlementRequest) (*GetMeteredEntitlementResponse, error)
	ReportUsage(context.Context, *ReportUsageRequest) (*ReportUsageResponse, error)
	ReportEvents(context.Context, *ReportEventsRequest) (*emptypb.Empty, error)
	ReloadEntitlements(context.Context, *ReloadEntitlementsRequest) (*ReloadEntitlementsResponse, error)
	mustEmbedUnimplementedSidecarServiceServer()
}

// UnimplementedSidecarServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSidecarServiceServer struct{}

func (UnimplementedSidecarServiceServer) GetEntitlements(context.Context, *GetEntitlementsRequest) (*GetEntitlementsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEntitlements not implemented")
}
func (UnimplementedSidecarServiceServer) GetBooleanEntitlement(context.Context, *GetBooleanEntitlementRequest) (*GetBooleanEntitlementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBooleanEntitlement not implemented")
}
func (UnimplementedSidecarServiceServer) GetNumericEntitlement(context.Context, *GetNumericEntitlementRequest) (*GetNumericEntitlementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNumericEntitlement not implemented")
}
func (UnimplementedSidecarServiceServer) GetMeteredEntitlement(context.Context, *GetMeteredEntitlementRequest) (*GetMeteredEntitlementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMeteredEntitlement not implemented")
}
func (UnimplementedSidecarServiceServer) ReportUsage(context.Context, *ReportUsageRequest) (*ReportUsageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportUsage not implemented")
}
func (UnimplementedSidecarServiceServer) ReportEvents(context.Context, *ReportEventsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportEvents not implemented")
}
func (UnimplementedSidecarServiceServer) ReloadEntitlements(context.Context, *ReloadEntitlementsRequest) (*ReloadEntitlementsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReloadEntitlements not implemented")
}
func (UnimplementedSidecarServiceServer) mustEmbedUnimplementedSidecarServiceServer() {}
func (UnimplementedSidecarServiceServer) testEmbeddedByValue()                        {}

// UnsafeSidecarServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SidecarServiceServer will
// result in compilation errors.
type UnsafeSidecarServiceServer interface {
	mustEmbedUnimplementedSidecarServiceServer()
}

func RegisterSidecarServiceServer(s grpc.ServiceRegistrar, srv SidecarServiceServer) {
	// If the following call pancis, it indicates UnimplementedSidecarServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SidecarService_ServiceDesc, srv)
}

func _SidecarService_GetEntitlements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntitlementsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SidecarServiceServer).GetEntitlements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SidecarService_GetEntitlements_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SidecarServiceServer).GetEntitlements(ctx, req.(*GetEntitlementsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SidecarService_GetBooleanEntitlement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBooleanEntitlementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SidecarServiceServer).GetBooleanEntitlement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SidecarService_GetBooleanEntitlement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SidecarServiceServer).GetBooleanEntitlement(ctx, req.(*GetBooleanEntitlementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SidecarService_GetNumericEntitlement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNumericEntitlementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SidecarServiceServer).GetNumericEntitlement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SidecarService_GetNumericEntitlement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SidecarServiceServer).GetNumericEntitlement(ctx, req.(*GetNumericEntitlementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SidecarService_GetMeteredEntitlement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMeteredEntitlementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SidecarServiceServer).GetMeteredEntitlement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SidecarService_GetMeteredEntitlement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SidecarServiceServer).GetMeteredEntitlement(ctx, req.(*GetMeteredEntitlementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SidecarService_ReportUsage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportUsageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SidecarServiceServer).ReportUsage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SidecarService_ReportUsage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SidecarServiceServer).ReportUsage(ctx, req.(*ReportUsageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SidecarService_ReportEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SidecarServiceServer).ReportEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SidecarService_ReportEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SidecarServiceServer).ReportEvents(ctx, req.(*ReportEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SidecarService_ReloadEntitlements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReloadEntitlementsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SidecarServiceServer).ReloadEntitlements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SidecarService_ReloadEntitlements_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SidecarServiceServer).ReloadEntitlements(ctx, req.(*ReloadEntitlementsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SidecarService_ServiceDesc is the grpc.ServiceDesc for SidecarService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SidecarService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "stigg.sidecar.v1.SidecarService",
	HandlerType: (*SidecarServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEntitlements",
			Handler:    _SidecarService_GetEntitlements_Handler,
		},
		{
			MethodName: "GetBooleanEntitlement",
			Handler:    _SidecarService_GetBooleanEntitlement_Handler,
		},
		{
			MethodName: "GetNumericEntitlement",
			Handler:    _SidecarService_GetNumericEntitlement_Handler,
		},
		{
			MethodName: "GetMeteredEntitlement",
			Handler:    _SidecarService_GetMeteredEntitlement_Handler,
		},
		{
			MethodName: "ReportUsage",
			Handler:    _SidecarService_ReportUsage_Handler,
		},
		{
			MethodName: "ReportEvents",
			Handler:    _SidecarService_ReportEvents_Handler,
		},
		{
			MethodName: "ReloadEntitlements",
			Handler:    _SidecarService_ReloadEntitlements_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stigg/sidecar/v1/sidecar.proto",
}
