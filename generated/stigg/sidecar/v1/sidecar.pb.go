// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: stigg/sidecar/v1/sidecar.proto

package sidecarv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AccessDeniedReason int32

const (
	AccessDeniedReason_ACCESS_DENIED_REASON_UNSPECIFIED                            AccessDeniedReason = 0
	AccessDeniedReason_ACCESS_DENIED_REASON_UNKNOWN                                AccessDeniedReason = 1
	AccessDeniedReason_ACCESS_DENIED_REASON_CUSTOMER_IS_ARCHIVED                   AccessDeniedReason = 2
	AccessDeniedReason_ACCESS_DENIED_REASON_CUSTOMER_NOT_FOUND                     AccessDeniedReason = 3
	AccessDeniedReason_ACCESS_DENIED_REASON_CUSTOMER_RESOURCE_NOT_FOUND            AccessDeniedReason = 4
	AccessDeniedReason_ACCESS_DENIED_REASON_FEATURE_NOT_FOUND                      AccessDeniedReason = 5
	AccessDeniedReason_ACCESS_DENIED_REASON_NO_ACTIVE_SUBSCRIPTION                 AccessDeniedReason = 6
	AccessDeniedReason_ACCESS_DENIED_REASON_NO_FEATURE_ENTITLEMENT_IN_SUBSCRIPTION AccessDeniedReason = 7
	AccessDeniedReason_ACCESS_DENIED_REASON_REQUESTED_USAGE_EXCEEDING_LIMIT        AccessDeniedReason = 8
)

// Enum value maps for AccessDeniedReason.
var (
	AccessDeniedReason_name = map[int32]string{
		0: "ACCESS_DENIED_REASON_UNSPECIFIED",
		1: "ACCESS_DENIED_REASON_UNKNOWN",
		2: "ACCESS_DENIED_REASON_CUSTOMER_IS_ARCHIVED",
		3: "ACCESS_DENIED_REASON_CUSTOMER_NOT_FOUND",
		4: "ACCESS_DENIED_REASON_CUSTOMER_RESOURCE_NOT_FOUND",
		5: "ACCESS_DENIED_REASON_FEATURE_NOT_FOUND",
		6: "ACCESS_DENIED_REASON_NO_ACTIVE_SUBSCRIPTION",
		7: "ACCESS_DENIED_REASON_NO_FEATURE_ENTITLEMENT_IN_SUBSCRIPTION",
		8: "ACCESS_DENIED_REASON_REQUESTED_USAGE_EXCEEDING_LIMIT",
	}
	AccessDeniedReason_value = map[string]int32{
		"ACCESS_DENIED_REASON_UNSPECIFIED":                            0,
		"ACCESS_DENIED_REASON_UNKNOWN":                                1,
		"ACCESS_DENIED_REASON_CUSTOMER_IS_ARCHIVED":                   2,
		"ACCESS_DENIED_REASON_CUSTOMER_NOT_FOUND":                     3,
		"ACCESS_DENIED_REASON_CUSTOMER_RESOURCE_NOT_FOUND":            4,
		"ACCESS_DENIED_REASON_FEATURE_NOT_FOUND":                      5,
		"ACCESS_DENIED_REASON_NO_ACTIVE_SUBSCRIPTION":                 6,
		"ACCESS_DENIED_REASON_NO_FEATURE_ENTITLEMENT_IN_SUBSCRIPTION": 7,
		"ACCESS_DENIED_REASON_REQUESTED_USAGE_EXCEEDING_LIMIT":        8,
	}
)

func (x AccessDeniedReason) Enum() *AccessDeniedReason {
	p := new(AccessDeniedReason)
	*p = x
	return p
}

func (x AccessDeniedReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccessDeniedReason) Descriptor() protoreflect.EnumDescriptor {
	return file_stigg_sidecar_v1_sidecar_proto_enumTypes[0].Descriptor()
}

func (AccessDeniedReason) Type() protoreflect.EnumType {
	return &file_stigg_sidecar_v1_sidecar_proto_enumTypes[0]
}

func (x AccessDeniedReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccessDeniedReason.Descriptor instead.
func (AccessDeniedReason) EnumDescriptor() ([]byte, []int) {
	return file_stigg_sidecar_v1_sidecar_proto_rawDescGZIP(), []int{0}
}

type FeatureType int32

const (
	FeatureType_FEATURE_TYPE_UNSPECIFIED FeatureType = 0
	FeatureType_FEATURE_TYPE_BOOLEAN     FeatureType = 1
	FeatureType_FEATURE_TYPE_NUMBER      FeatureType = 2
)

// Enum value maps for FeatureType.
var (
	FeatureType_name = map[int32]string{
		0: "FEATURE_TYPE_UNSPECIFIED",
		1: "FEATURE_TYPE_BOOLEAN",
		2: "FEATURE_TYPE_NUMBER",
	}
	FeatureType_value = map[string]int32{
		"FEATURE_TYPE_UNSPECIFIED": 0,
		"FEATURE_TYPE_BOOLEAN":     1,
		"FEATURE_TYPE_NUMBER":      2,
	}
)

func (x FeatureType) Enum() *FeatureType {
	p := new(FeatureType)
	*p = x
	return p
}

func (x FeatureType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FeatureType) Descriptor() protoreflect.EnumDescriptor {
	return file_stigg_sidecar_v1_sidecar_proto_enumTypes[1].Descriptor()
}

func (FeatureType) Type() protoreflect.EnumType {
	return &file_stigg_sidecar_v1_sidecar_proto_enumTypes[1]
}

func (x FeatureType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FeatureType.Descriptor instead.
func (FeatureType) EnumDescriptor() ([]byte, []int) {
	return file_stigg_sidecar_v1_sidecar_proto_rawDescGZIP(), []int{1}
}

type MeterType int32

const (
	MeterType_METER_TYPE_UNSPECIFIED MeterType = 0
	MeterType_METER_TYPE_NONE        MeterType = 1
	MeterType_METER_TYPE_FLUCTUATING MeterType = 2
	MeterType_METER_TYPE_INCREMENTAL MeterType = 3
)

// Enum value maps for MeterType.
var (
	MeterType_name = map[int32]string{
		0: "METER_TYPE_UNSPECIFIED",
		1: "METER_TYPE_NONE",
		2: "METER_TYPE_FLUCTUATING",
		3: "METER_TYPE_INCREMENTAL",
	}
	MeterType_value = map[string]int32{
		"METER_TYPE_UNSPECIFIED": 0,
		"METER_TYPE_NONE":        1,
		"METER_TYPE_FLUCTUATING": 2,
		"METER_TYPE_INCREMENTAL": 3,
	}
)

func (x MeterType) Enum() *MeterType {
	p := new(MeterType)
	*p = x
	return p
}

func (x MeterType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MeterType) Descriptor() protoreflect.EnumDescriptor {
	return file_stigg_sidecar_v1_sidecar_proto_enumTypes[2].Descriptor()
}

func (MeterType) Type() protoreflect.EnumType {
	return &file_stigg_sidecar_v1_sidecar_proto_enumTypes[2]
}

func (x MeterType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MeterType.Descriptor instead.
func (MeterType) EnumDescriptor() ([]byte, []int) {
	return file_stigg_sidecar_v1_sidecar_proto_rawDescGZIP(), []int{2}
}

type EntitlementResetPeriod int32

const (
	EntitlementResetPeriod_ENTITLEMENT_RESET_PERIOD_UNSPECIFIED EntitlementResetPeriod = 0
	EntitlementResetPeriod_ENTITLEMENT_RESET_PERIOD_DAY         EntitlementResetPeriod = 1
	EntitlementResetPeriod_ENTITLEMENT_RESET_PERIOD_HOUR        EntitlementResetPeriod = 2
	EntitlementResetPeriod_ENTITLEMENT_RESET_PERIOD_MONTH       EntitlementResetPeriod = 3
	EntitlementResetPeriod_ENTITLEMENT_RESET_PERIOD_WEEK        EntitlementResetPeriod = 4
	EntitlementResetPeriod_ENTITLEMENT_RESET_PERIOD_YEAR        EntitlementResetPeriod = 5
)

// Enum value maps for EntitlementResetPeriod.
var (
	EntitlementResetPeriod_name = map[int32]string{
		0: "ENTITLEMENT_RESET_PERIOD_UNSPECIFIED",
		1: "ENTITLEMENT_RESET_PERIOD_DAY",
		2: "ENTITLEMENT_RESET_PERIOD_HOUR",
		3: "ENTITLEMENT_RESET_PERIOD_MONTH",
		4: "ENTITLEMENT_RESET_PERIOD_WEEK",
		5: "ENTITLEMENT_RESET_PERIOD_YEAR",
	}
	EntitlementResetPeriod_value = map[string]int32{
		"ENTITLEMENT_RESET_PERIOD_UNSPECIFIED": 0,
		"ENTITLEMENT_RESET_PERIOD_DAY":         1,
		"ENTITLEMENT_RESET_PERIOD_HOUR":        2,
		"ENTITLEMENT_RESET_PERIOD_MONTH":       3,
		"ENTITLEMENT_RESET_PERIOD_WEEK":        4,
		"ENTITLEMENT_RESET_PERIOD_YEAR":        5,
	}
)

func (x EntitlementResetPeriod) Enum() *EntitlementResetPeriod {
	p := new(EntitlementResetPeriod)
	*p = x
	return p
}

func (x EntitlementResetPeriod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EntitlementResetPeriod) Descriptor() protoreflect.EnumDescriptor {
	return file_stigg_sidecar_v1_sidecar_proto_enumTypes[3].Descriptor()
}

func (EntitlementResetPeriod) Type() protoreflect.EnumType {
	return &file_stigg_sidecar_v1_sidecar_proto_enumTypes[3]
}

func (x EntitlementResetPeriod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EntitlementResetPeriod.Descriptor instead.
func (EntitlementResetPeriod) EnumDescriptor() ([]byte, []int) {
	return file_stigg_sidecar_v1_sidecar_proto_rawDescGZIP(), []int{3}
}

type UsageUpdateBehavior int32

const (
	UsageUpdateBehavior_USAGE_UPDATE_BEHAVIOR_UNSPECIFIED UsageUpdateBehavior = 0
	UsageUpdateBehavior_USAGE_UPDATE_BEHAVIOR_DELTA       UsageUpdateBehavior = 1
	UsageUpdateBehavior_USAGE_UPDATE_BEHAVIOR_SET         UsageUpdateBehavior = 2
)

// Enum value maps for UsageUpdateBehavior.
var (
	UsageUpdateBehavior_name = map[int32]string{
		0: "USAGE_UPDATE_BEHAVIOR_UNSPECIFIED",
		1: "USAGE_UPDATE_BEHAVIOR_DELTA",
		2: "USAGE_UPDATE_BEHAVIOR_SET",
	}
	UsageUpdateBehavior_value = map[string]int32{
		"USAGE_UPDATE_BEHAVIOR_UNSPECIFIED": 0,
		"USAGE_UPDATE_BEHAVIOR_DELTA":       1,
		"USAGE_UPDATE_BEHAVIOR_SET":         2,
	}
)

func (x UsageUpdateBehavior) Enum() *UsageUpdateBehavior {
	p := new(UsageUpdateBehavior)
	*p = x
	return p
}

func (x UsageUpdateBehavior) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UsageUpdateBehavior) Descriptor() protoreflect.EnumDescriptor {
	return file_stigg_sidecar_v1_sidecar_proto_enumTypes[4].Descriptor()
}

func (UsageUpdateBehavior) Type() protoreflect.EnumType {
	return &file_stigg_sidecar_v1_sidecar_proto_enumTypes[4]
}

func (x UsageUpdateBehavior) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UsageUpdateBehavior.Descriptor instead.
func (UsageUpdateBehavior) EnumDescriptor() ([]byte, []int) {
	return file_stigg_sidecar_v1_sidecar_proto_rawDescGZIP(), []int{4}
}

type EntitlementFeature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	FeatureType FeatureType `protobuf:"varint,2,opt,name=feature_type,json=featureType,proto3,enum=stigg.sidecar.v1.FeatureType" json:"feature_type,omitempty"`
	Units       *string     `protobuf:"bytes,3,opt,name=units,proto3,oneof" json:"units,omitempty"`
	UnitsPlural *string     `protobuf:"bytes,4,opt,name=units_plural,json=unitsPlural,proto3,oneof" json:"units_plural,omitempty"`
	MeterType   MeterType   `protobuf:"varint,5,opt,name=meter_type,json=meterType,proto3,enum=stigg.sidecar.v1.MeterType" json:"meter_type,omitempty"`
	IsMetered   bool        `protobuf:"varint,6,opt,name=is_metered,json=isMetered,proto3" json:"is_metered,omitempty"`
}

func (x *EntitlementFeature) Reset() {
	*x = EntitlementFeature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stigg_sidecar_v1_sidecar_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntitlementFeature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntitlementFeature) ProtoMessage() {}

func (x *EntitlementFeature) ProtoReflect() protoreflect.Message {
	mi := &file_stigg_sidecar_v1_sidecar_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntitlementFeature.ProtoReflect.Descriptor instead.
func (*EntitlementFeature) Descriptor() ([]byte, []int) {
	return file_stigg_sidecar_v1_sidecar_proto_rawDescGZIP(), []int{0}
}

func (x *EntitlementFeature) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EntitlementFeature) GetFeatureType() FeatureType {
	if x != nil {
		return x.FeatureType
	}
	return FeatureType_FEATURE_TYPE_UNSPECIFIED
}

func (x *EntitlementFeature) GetUnits() string {
	if x != nil && x.Units != nil {
		return *x.Units
	}
	return ""
}

func (x *EntitlementFeature) GetUnitsPlural() string {
	if x != nil && x.UnitsPlural != nil {
		return *x.UnitsPlural
	}
	return ""
}

func (x *EntitlementFeature) GetMeterType() MeterType {
	if x != nil {
		return x.MeterType
	}
	return MeterType_METER_TYPE_UNSPECIFIED
}

func (x *EntitlementFeature) GetIsMetered() bool {
	if x != nil {
		return x.IsMetered
	}
	return false
}

type BooleanEntitlement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Feature *EntitlementFeature `protobuf:"bytes,4,opt,name=feature,proto3,oneof" json:"feature,omitempty"`
}

func (x *BooleanEntitlement) Reset() {
	*x = BooleanEntitlement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stigg_sidecar_v1_sidecar_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BooleanEntitlement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BooleanEntitlement) ProtoMessage() {}

func (x *BooleanEntitlement) ProtoReflect() protoreflect.Message {
	mi := &file_stigg_sidecar_v1_sidecar_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BooleanEntitlement.ProtoReflect.Descriptor instead.
func (*BooleanEntitlement) Descriptor() ([]byte, []int) {
	return file_stigg_sidecar_v1_sidecar_proto_rawDescGZIP(), []int{1}
}

func (x *BooleanEntitlement) GetFeature() *EntitlementFeature {
	if x != nil {
		return x.Feature
	}
	return nil
}

type NumericEntitlement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Feature     *EntitlementFeature `protobuf:"bytes,4,opt,name=feature,proto3,oneof" json:"feature,omitempty"`
	Value       *int32              `protobuf:"varint,5,opt,name=value,proto3,oneof" json:"value,omitempty"`
	IsUnlimited bool                `protobuf:"varint,6,opt,name=is_unlimited,json=isUnlimited,proto3" json:"is_unlimited,omitempty"`
}

func (x *NumericEntitlement) Reset() {
	*x = NumericEntitlement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stigg_sidecar_v1_sidecar_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NumericEntitlement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NumericEntitlement) ProtoMessage() {}

func (x *NumericEntitlement) ProtoReflect() protoreflect.Message {
	mi := &file_stigg_sidecar_v1_sidecar_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NumericEntitlement.ProtoReflect.Descriptor instead.
func (*NumericEntitlement) Descriptor() ([]byte, []int) {
	return file_stigg_sidecar_v1_sidecar_proto_rawDescGZIP(), []int{2}
}

func (x *NumericEntitlement) GetFeature() *EntitlementFeature {
	if x != nil {
		return x.Feature
	}
	return nil
}

func (x *NumericEntitlement) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *NumericEntitlement) GetIsUnlimited() bool {
	if x != nil {
		return x.IsUnlimited
	}
	return false
}

type MeteredEntitlement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Feature      *EntitlementFeature     `protobuf:"bytes,4,opt,name=feature,proto3,oneof" json:"feature,omitempty"`
	UsageLimit   *float64                `protobuf:"fixed64,5,opt,name=usage_limit,json=usageLimit,proto3,oneof" json:"usage_limit,omitempty"`
	IsUnlimited  bool                    `protobuf:"varint,6,opt,name=is_unlimited,json=isUnlimited,proto3" json:"is_unlimited,omitempty"`
	CurrentUsage float64                 `protobuf:"fixed64,7,opt,name=current_usage,json=currentUsage,proto3" json:"current_usage,omitempty"`
	ResetPeriod  *EntitlementResetPeriod `protobuf:"varint,9,opt,name=reset_period,json=resetPeriod,proto3,enum=stigg.sidecar.v1.EntitlementResetPeriod,oneof" json:"reset_period,omitempty"`
	// Deprecated: Marked as deprecated in stigg/sidecar/v1/sidecar.proto.
	NextResetDate     *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=next_reset_date,json=nextResetDate,proto3,oneof" json:"next_reset_date,omitempty"`
	UsagePeriodAnchor *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=usage_period_anchor,json=usagePeriodAnchor,proto3,oneof" json:"usage_period_anchor,omitempty"`
	UsagePeriodStart  *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=usage_period_start,json=usagePeriodStart,proto3,oneof" json:"usage_period_start,omitempty"`
	UsagePeriodEnd    *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=usage_period_end,json=usagePeriodEnd,proto3,oneof" json:"usage_period_end,omitempty"`
}

func (x *MeteredEntitlement) Reset() {
	*x = MeteredEntitlement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stigg_sidecar_v1_sidecar_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeteredEntitlement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeteredEntitlement) ProtoMessage() {}

func (x *MeteredEntitlement) ProtoReflect() protoreflect.Message {
	mi := &file_stigg_sidecar_v1_sidecar_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeteredEntitlement.ProtoReflect.Descriptor instead.
func (*MeteredEntitlement) Descriptor() ([]byte, []int) {
	return file_stigg_sidecar_v1_sidecar_proto_rawDescGZIP(), []int{3}
}

func (x *MeteredEntitlement) GetFeature() *EntitlementFeature {
	if x != nil {
		return x.Feature
	}
	return nil
}

func (x *MeteredEntitlement) GetUsageLimit() float64 {
	if x != nil && x.UsageLimit != nil {
		return *x.UsageLimit
	}
	return 0
}

func (x *MeteredEntitlement) GetIsUnlimited() bool {
	if x != nil {
		return x.IsUnlimited
	}
	return false
}

func (x *MeteredEntitlement) GetCurrentUsage() float64 {
	if x != nil {
		return x.CurrentUsage
	}
	return 0
}

func (x *MeteredEntitlement) GetResetPeriod() EntitlementResetPeriod {
	if x != nil && x.ResetPeriod != nil {
		return *x.ResetPeriod
	}
	return EntitlementResetPeriod_ENTITLEMENT_RESET_PERIOD_UNSPECIFIED
}

// Deprecated: Marked as deprecated in stigg/sidecar/v1/sidecar.proto.
func (x *MeteredEntitlement) GetNextResetDate() *timestamppb.Timestamp {
	if x != nil {
		return x.NextResetDate
	}
	return nil
}

func (x *MeteredEntitlement) GetUsagePeriodAnchor() *timestamppb.Timestamp {
	if x != nil {
		return x.UsagePeriodAnchor
	}
	return nil
}

func (x *MeteredEntitlement) GetUsagePeriodStart() *timestamppb.Timestamp {
	if x != nil {
		return x.UsagePeriodStart
	}
	return nil
}

func (x *MeteredEntitlement) GetUsagePeriodEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.UsagePeriodEnd
	}
	return nil
}

type Entitlement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Entitlement:
	//
	//	*Entitlement_Boolean
	//	*Entitlement_Numeric
	//	*Entitlement_Metered
	Entitlement isEntitlement_Entitlement `protobuf_oneof:"entitlement"`
}

func (x *Entitlement) Reset() {
	*x = Entitlement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stigg_sidecar_v1_sidecar_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Entitlement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Entitlement) ProtoMessage() {}

func (x *Entitlement) ProtoReflect() protoreflect.Message {
	mi := &file_stigg_sidecar_v1_sidecar_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Entitlement.ProtoReflect.Descriptor instead.
func (*Entitlement) Descriptor() ([]byte, []int) {
	return file_stigg_sidecar_v1_sidecar_proto_rawDescGZIP(), []int{4}
}

func (m *Entitlement) GetEntitlement() isEntitlement_Entitlement {
	if m != nil {
		return m.Entitlement
	}
	return nil
}

func (x *Entitlement) GetBoolean() *BooleanEntitlement {
	if x, ok := x.GetEntitlement().(*Entitlement_Boolean); ok {
		return x.Boolean
	}
	return nil
}

func (x *Entitlement) GetNumeric() *NumericEntitlement {
	if x, ok := x.GetEntitlement().(*Entitlement_Numeric); ok {
		return x.Numeric
	}
	return nil
}

func (x *Entitlement) GetMetered() *MeteredEntitlement {
	if x, ok := x.GetEntitlement().(*Entitlement_Metered); ok {
		return x.Metered
	}
	return nil
}

type isEntitlement_Entitlement interface {
	isEntitlement_Entitlement()
}

type Entitlement_Boolean struct {
	Boolean *BooleanEntitlement `protobuf:"bytes,1,opt,name=boolean,proto3,oneof"`
}

type Entitlement_Numeric struct {
	Numeric *NumericEntitlement `protobuf:"bytes,2,opt,name=numeric,proto3,oneof"`
}

type Entitlement_Metered struct {
	Metered *MeteredEntitlement `protobuf:"bytes,3,opt,name=metered,proto3,oneof"`
}

func (*Entitlement_Boolean) isEntitlement_Entitlement() {}

func (*Entitlement_Numeric) isEntitlement_Entitlement() {}

func (*Entitlement_Metered) isEntitlement_Entitlement() {}

type GetEntitlementsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerId string  `protobuf:"bytes,1,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	ResourceId *string `protobuf:"bytes,2,opt,name=resource_id,json=resourceId,proto3,oneof" json:"resource_id,omitempty"`
}

func (x *GetEntitlementsRequest) Reset() {
	*x = GetEntitlementsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stigg_sidecar_v1_sidecar_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEntitlementsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEntitlementsRequest) ProtoMessage() {}

func (x *GetEntitlementsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stigg_sidecar_v1_sidecar_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEntitlementsRequest.ProtoReflect.Descriptor instead.
func (*GetEntitlementsRequest) Descriptor() ([]byte, []int) {
	return file_stigg_sidecar_v1_sidecar_proto_rawDescGZIP(), []int{5}
}

func (x *GetEntitlementsRequest) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *GetEntitlementsRequest) GetResourceId() string {
	if x != nil && x.ResourceId != nil {
		return *x.ResourceId
	}
	return ""
}

type GetEntitlementsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entitlements []*Entitlement `protobuf:"bytes,1,rep,name=entitlements,proto3" json:"entitlements,omitempty"`
}

func (x *GetEntitlementsResponse) Reset() {
	*x = GetEntitlementsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stigg_sidecar_v1_sidecar_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEntitlementsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEntitlementsResponse) ProtoMessage() {}

func (x *GetEntitlementsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_stigg_sidecar_v1_sidecar_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEntitlementsResponse.ProtoReflect.Descriptor instead.
func (*GetEntitlementsResponse) Descriptor() ([]byte, []int) {
	return file_stigg_sidecar_v1_sidecar_proto_rawDescGZIP(), []int{6}
}

func (x *GetEntitlementsResponse) GetEntitlements() []*Entitlement {
	if x != nil {
		return x.Entitlements
	}
	return nil
}

type BooleanEntitlementFallback struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HasAccess bool `protobuf:"varint,1,opt,name=has_access,json=hasAccess,proto3" json:"has_access,omitempty"`
}

func (x *BooleanEntitlementFallback) Reset() {
	*x = BooleanEntitlementFallback{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stigg_sidecar_v1_sidecar_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BooleanEntitlementFallback) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BooleanEntitlementFallback) ProtoMessage() {}

func (x *BooleanEntitlementFallback) ProtoReflect() protoreflect.Message {
	mi := &file_stigg_sidecar_v1_sidecar_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BooleanEntitlementFallback.ProtoReflect.Descriptor instead.
func (*BooleanEntitlementFallback) Descriptor() ([]byte, []int) {
	return file_stigg_sidecar_v1_sidecar_proto_rawDescGZIP(), []int{7}
}

func (x *BooleanEntitlementFallback) GetHasAccess() bool {
	if x != nil {
		return x.HasAccess
	}
	return false
}

type BooleanEntitlementOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fallback *BooleanEntitlementFallback `protobuf:"bytes,1,opt,name=fallback,proto3,oneof" json:"fallback,omitempty"`
}

func (x *BooleanEntitlementOptions) Reset() {
	*x = BooleanEntitlementOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stigg_sidecar_v1_sidecar_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BooleanEntitlementOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BooleanEntitlementOptions) ProtoMessage() {}

func (x *BooleanEntitlementOptions) ProtoReflect() protoreflect.Message {
	mi := &file_stigg_sidecar_v1_sidecar_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BooleanEntitlementOptions.ProtoReflect.Descriptor instead.
func (*BooleanEntitlementOptions) Descriptor() ([]byte, []int) {
	return file_stigg_sidecar_v1_sidecar_proto_rawDescGZIP(), []int{8}
}

func (x *BooleanEntitlementOptions) GetFallback() *BooleanEntitlementFallback {
	if x != nil {
		return x.Fallback
	}
	return nil
}

type GetBooleanEntitlementRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerId string                     `protobuf:"bytes,1,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	FeatureId  string                     `protobuf:"bytes,2,opt,name=feature_id,json=featureId,proto3" json:"feature_id,omitempty"`
	ResourceId *string                    `protobuf:"bytes,3,opt,name=resource_id,json=resourceId,proto3,oneof" json:"resource_id,omitempty"`
	Options    *BooleanEntitlementOptions `protobuf:"bytes,4,opt,name=options,proto3,oneof" json:"options,omitempty"`
}

func (x *GetBooleanEntitlementRequest) Reset() {
	*x = GetBooleanEntitlementRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stigg_sidecar_v1_sidecar_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBooleanEntitlementRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBooleanEntitlementRequest) ProtoMessage() {}

func (x *GetBooleanEntitlementRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stigg_sidecar_v1_sidecar_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBooleanEntitlementRequest.ProtoReflect.Descriptor instead.
func (*GetBooleanEntitlementRequest) Descriptor() ([]byte, []int) {
	return file_stigg_sidecar_v1_sidecar_proto_rawDescGZIP(), []int{9}
}

func (x *GetBooleanEntitlementRequest) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *GetBooleanEntitlementRequest) GetFeatureId() string {
	if x != nil {
		return x.FeatureId
	}
	return ""
}

func (x *GetBooleanEntitlementRequest) GetResourceId() string {
	if x != nil && x.ResourceId != nil {
		return *x.ResourceId
	}
	return ""
}

func (x *GetBooleanEntitlementRequest) GetOptions() *BooleanEntitlementOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

type GetBooleanEntitlementResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HasAccess          bool                `protobuf:"varint,1,opt,name=has_access,json=hasAccess,proto3" json:"has_access,omitempty"`
	IsFallback         bool                `protobuf:"varint,2,opt,name=is_fallback,json=isFallback,proto3" json:"is_fallback,omitempty"`
	AccessDeniedReason *AccessDeniedReason `protobuf:"varint,3,opt,name=access_denied_reason,json=accessDeniedReason,proto3,enum=stigg.sidecar.v1.AccessDeniedReason,oneof" json:"access_denied_reason,omitempty"`
	Entitlement        *BooleanEntitlement `protobuf:"bytes,4,opt,name=entitlement,proto3" json:"entitlement,omitempty"`
}

func (x *GetBooleanEntitlementResponse) Reset() {
	*x = GetBooleanEntitlementResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stigg_sidecar_v1_sidecar_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBooleanEntitlementResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBooleanEntitlementResponse) ProtoMessage() {}

func (x *GetBooleanEntitlementResponse) ProtoReflect() protoreflect.Message {
	mi := &file_stigg_sidecar_v1_sidecar_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBooleanEntitlementResponse.ProtoReflect.Descriptor instead.
func (*GetBooleanEntitlementResponse) Descriptor() ([]byte, []int) {
	return file_stigg_sidecar_v1_sidecar_proto_rawDescGZIP(), []int{10}
}

func (x *GetBooleanEntitlementResponse) GetHasAccess() bool {
	if x != nil {
		return x.HasAccess
	}
	return false
}

func (x *GetBooleanEntitlementResponse) GetIsFallback() bool {
	if x != nil {
		return x.IsFallback
	}
	return false
}

func (x *GetBooleanEntitlementResponse) GetAccessDeniedReason() AccessDeniedReason {
	if x != nil && x.AccessDeniedReason != nil {
		return *x.AccessDeniedReason
	}
	return AccessDeniedReason_ACCESS_DENIED_REASON_UNSPECIFIED
}

func (x *GetBooleanEntitlementResponse) GetEntitlement() *BooleanEntitlement {
	if x != nil {
		return x.Entitlement
	}
	return nil
}

type NumericEntitlementFallback struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HasAccess   bool   `protobuf:"varint,1,opt,name=has_access,json=hasAccess,proto3" json:"has_access,omitempty"`
	Value       *int32 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	IsUnlimited *bool  `protobuf:"varint,3,opt,name=is_unlimited,json=isUnlimited,proto3,oneof" json:"is_unlimited,omitempty"`
}

func (x *NumericEntitlementFallback) Reset() {
	*x = NumericEntitlementFallback{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stigg_sidecar_v1_sidecar_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NumericEntitlementFallback) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NumericEntitlementFallback) ProtoMessage() {}

func (x *NumericEntitlementFallback) ProtoReflect() protoreflect.Message {
	mi := &file_stigg_sidecar_v1_sidecar_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NumericEntitlementFallback.ProtoReflect.Descriptor instead.
func (*NumericEntitlementFallback) Descriptor() ([]byte, []int) {
	return file_stigg_sidecar_v1_sidecar_proto_rawDescGZIP(), []int{11}
}

func (x *NumericEntitlementFallback) GetHasAccess() bool {
	if x != nil {
		return x.HasAccess
	}
	return false
}

func (x *NumericEntitlementFallback) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *NumericEntitlementFallback) GetIsUnlimited() bool {
	if x != nil && x.IsUnlimited != nil {
		return *x.IsUnlimited
	}
	return false
}

type NumericEntitlementOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fallback *NumericEntitlementFallback `protobuf:"bytes,1,opt,name=fallback,proto3,oneof" json:"fallback,omitempty"`
}

func (x *NumericEntitlementOptions) Reset() {
	*x = NumericEntitlementOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stigg_sidecar_v1_sidecar_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NumericEntitlementOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NumericEntitlementOptions) ProtoMessage() {}

func (x *NumericEntitlementOptions) ProtoReflect() protoreflect.Message {
	mi := &file_stigg_sidecar_v1_sidecar_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NumericEntitlementOptions.ProtoReflect.Descriptor instead.
func (*NumericEntitlementOptions) Descriptor() ([]byte, []int) {
	return file_stigg_sidecar_v1_sidecar_proto_rawDescGZIP(), []int{12}
}

func (x *NumericEntitlementOptions) GetFallback() *NumericEntitlementFallback {
	if x != nil {
		return x.Fallback
	}
	return nil
}

type GetNumericEntitlementRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerId string                     `protobuf:"bytes,1,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	FeatureId  string                     `protobuf:"bytes,2,opt,name=feature_id,json=featureId,proto3" json:"feature_id,omitempty"`
	ResourceId *string                    `protobuf:"bytes,3,opt,name=resource_id,json=resourceId,proto3,oneof" json:"resource_id,omitempty"`
	Options    *NumericEntitlementOptions `protobuf:"bytes,4,opt,name=options,proto3,oneof" json:"options,omitempty"`
}

func (x *GetNumericEntitlementRequest) Reset() {
	*x = GetNumericEntitlementRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stigg_sidecar_v1_sidecar_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNumericEntitlementRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNumericEntitlementRequest) ProtoMessage() {}

func (x *GetNumericEntitlementRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stigg_sidecar_v1_sidecar_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNumericEntitlementRequest.ProtoReflect.Descriptor instead.
func (*GetNumericEntitlementRequest) Descriptor() ([]byte, []int) {
	return file_stigg_sidecar_v1_sidecar_proto_rawDescGZIP(), []int{13}
}

func (x *GetNumericEntitlementRequest) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *GetNumericEntitlementRequest) GetFeatureId() string {
	if x != nil {
		return x.FeatureId
	}
	return ""
}

func (x *GetNumericEntitlementRequest) GetResourceId() string {
	if x != nil && x.ResourceId != nil {
		return *x.ResourceId
	}
	return ""
}

func (x *GetNumericEntitlementRequest) GetOptions() *NumericEntitlementOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

type GetNumericEntitlementResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HasAccess          bool                `protobuf:"varint,1,opt,name=has_access,json=hasAccess,proto3" json:"has_access,omitempty"`
	IsFallback         bool                `protobuf:"varint,2,opt,name=is_fallback,json=isFallback,proto3" json:"is_fallback,omitempty"`
	AccessDeniedReason *AccessDeniedReason `protobuf:"varint,3,opt,name=access_denied_reason,json=accessDeniedReason,proto3,enum=stigg.sidecar.v1.AccessDeniedReason,oneof" json:"access_denied_reason,omitempty"`
	Entitlement        *NumericEntitlement `protobuf:"bytes,4,opt,name=entitlement,proto3" json:"entitlement,omitempty"`
}

func (x *GetNumericEntitlementResponse) Reset() {
	*x = GetNumericEntitlementResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stigg_sidecar_v1_sidecar_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNumericEntitlementResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNumericEntitlementResponse) ProtoMessage() {}

func (x *GetNumericEntitlementResponse) ProtoReflect() protoreflect.Message {
	mi := &file_stigg_sidecar_v1_sidecar_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNumericEntitlementResponse.ProtoReflect.Descriptor instead.
func (*GetNumericEntitlementResponse) Descriptor() ([]byte, []int) {
	return file_stigg_sidecar_v1_sidecar_proto_rawDescGZIP(), []int{14}
}

func (x *GetNumericEntitlementResponse) GetHasAccess() bool {
	if x != nil {
		return x.HasAccess
	}
	return false
}

func (x *GetNumericEntitlementResponse) GetIsFallback() bool {
	if x != nil {
		return x.IsFallback
	}
	return false
}

func (x *GetNumericEntitlementResponse) GetAccessDeniedReason() AccessDeniedReason {
	if x != nil && x.AccessDeniedReason != nil {
		return *x.AccessDeniedReason
	}
	return AccessDeniedReason_ACCESS_DENIED_REASON_UNSPECIFIED
}

func (x *GetNumericEntitlementResponse) GetEntitlement() *NumericEntitlement {
	if x != nil {
		return x.Entitlement
	}
	return nil
}

type MeteredEntitlementFallback struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HasAccess   bool     `protobuf:"varint,1,opt,name=has_access,json=hasAccess,proto3" json:"has_access,omitempty"`
	UsageLimit  *float64 `protobuf:"fixed64,2,opt,name=usage_limit,json=usageLimit,proto3,oneof" json:"usage_limit,omitempty"`
	IsUnlimited *bool    `protobuf:"varint,3,opt,name=is_unlimited,json=isUnlimited,proto3,oneof" json:"is_unlimited,omitempty"`
}

func (x *MeteredEntitlementFallback) Reset() {
	*x = MeteredEntitlementFallback{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stigg_sidecar_v1_sidecar_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeteredEntitlementFallback) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeteredEntitlementFallback) ProtoMessage() {}

func (x *MeteredEntitlementFallback) ProtoReflect() protoreflect.Message {
	mi := &file_stigg_sidecar_v1_sidecar_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeteredEntitlementFallback.ProtoReflect.Descriptor instead.
func (*MeteredEntitlementFallback) Descriptor() ([]byte, []int) {
	return file_stigg_sidecar_v1_sidecar_proto_rawDescGZIP(), []int{15}
}

func (x *MeteredEntitlementFallback) GetHasAccess() bool {
	if x != nil {
		return x.HasAccess
	}
	return false
}

func (x *MeteredEntitlementFallback) GetUsageLimit() float64 {
	if x != nil && x.UsageLimit != nil {
		return *x.UsageLimit
	}
	return 0
}

func (x *MeteredEntitlementFallback) GetIsUnlimited() bool {
	if x != nil && x.IsUnlimited != nil {
		return *x.IsUnlimited
	}
	return false
}

type MeteredEntitlementOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestedUsage *float64                    `protobuf:"fixed64,1,opt,name=requested_usage,json=requestedUsage,proto3,oneof" json:"requested_usage,omitempty"`
	Fallback       *MeteredEntitlementFallback `protobuf:"bytes,2,opt,name=fallback,proto3,oneof" json:"fallback,omitempty"`
}

func (x *MeteredEntitlementOptions) Reset() {
	*x = MeteredEntitlementOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stigg_sidecar_v1_sidecar_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeteredEntitlementOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeteredEntitlementOptions) ProtoMessage() {}

func (x *MeteredEntitlementOptions) ProtoReflect() protoreflect.Message {
	mi := &file_stigg_sidecar_v1_sidecar_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeteredEntitlementOptions.ProtoReflect.Descriptor instead.
func (*MeteredEntitlementOptions) Descriptor() ([]byte, []int) {
	return file_stigg_sidecar_v1_sidecar_proto_rawDescGZIP(), []int{16}
}

func (x *MeteredEntitlementOptions) GetRequestedUsage() float64 {
	if x != nil && x.RequestedUsage != nil {
		return *x.RequestedUsage
	}
	return 0
}

func (x *MeteredEntitlementOptions) GetFallback() *MeteredEntitlementFallback {
	if x != nil {
		return x.Fallback
	}
	return nil
}

type GetMeteredEntitlementRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerId string                     `protobuf:"bytes,1,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	FeatureId  string                     `protobuf:"bytes,2,opt,name=feature_id,json=featureId,proto3" json:"feature_id,omitempty"`
	ResourceId *string                    `protobuf:"bytes,3,opt,name=resource_id,json=resourceId,proto3,oneof" json:"resource_id,omitempty"`
	Options    *MeteredEntitlementOptions `protobuf:"bytes,4,opt,name=options,proto3,oneof" json:"options,omitempty"`
}

func (x *GetMeteredEntitlementRequest) Reset() {
	*x = GetMeteredEntitlementRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stigg_sidecar_v1_sidecar_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMeteredEntitlementRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMeteredEntitlementRequest) ProtoMessage() {}

func (x *GetMeteredEntitlementRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stigg_sidecar_v1_sidecar_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMeteredEntitlementRequest.ProtoReflect.Descriptor instead.
func (*GetMeteredEntitlementRequest) Descriptor() ([]byte, []int) {
	return file_stigg_sidecar_v1_sidecar_proto_rawDescGZIP(), []int{17}
}

func (x *GetMeteredEntitlementRequest) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *GetMeteredEntitlementRequest) GetFeatureId() string {
	if x != nil {
		return x.FeatureId
	}
	return ""
}

func (x *GetMeteredEntitlementRequest) GetResourceId() string {
	if x != nil && x.ResourceId != nil {
		return *x.ResourceId
	}
	return ""
}

func (x *GetMeteredEntitlementRequest) GetOptions() *MeteredEntitlementOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

type GetMeteredEntitlementResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HasAccess          bool                `protobuf:"varint,1,opt,name=has_access,json=hasAccess,proto3" json:"has_access,omitempty"`
	IsFallback         bool                `protobuf:"varint,2,opt,name=is_fallback,json=isFallback,proto3" json:"is_fallback,omitempty"`
	AccessDeniedReason *AccessDeniedReason `protobuf:"varint,3,opt,name=access_denied_reason,json=accessDeniedReason,proto3,enum=stigg.sidecar.v1.AccessDeniedReason,oneof" json:"access_denied_reason,omitempty"`
	RequestedUsage     float64             `protobuf:"fixed64,4,opt,name=requested_usage,json=requestedUsage,proto3" json:"requested_usage,omitempty"`
	Entitlement        *MeteredEntitlement `protobuf:"bytes,5,opt,name=entitlement,proto3" json:"entitlement,omitempty"`
}

func (x *GetMeteredEntitlementResponse) Reset() {
	*x = GetMeteredEntitlementResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stigg_sidecar_v1_sidecar_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMeteredEntitlementResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMeteredEntitlementResponse) ProtoMessage() {}

func (x *GetMeteredEntitlementResponse) ProtoReflect() protoreflect.Message {
	mi := &file_stigg_sidecar_v1_sidecar_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMeteredEntitlementResponse.ProtoReflect.Descriptor instead.
func (*GetMeteredEntitlementResponse) Descriptor() ([]byte, []int) {
	return file_stigg_sidecar_v1_sidecar_proto_rawDescGZIP(), []int{18}
}

func (x *GetMeteredEntitlementResponse) GetHasAccess() bool {
	if x != nil {
		return x.HasAccess
	}
	return false
}

func (x *GetMeteredEntitlementResponse) GetIsFallback() bool {
	if x != nil {
		return x.IsFallback
	}
	return false
}

func (x *GetMeteredEntitlementResponse) GetAccessDeniedReason() AccessDeniedReason {
	if x != nil && x.AccessDeniedReason != nil {
		return *x.AccessDeniedReason
	}
	return AccessDeniedReason_ACCESS_DENIED_REASON_UNSPECIFIED
}

func (x *GetMeteredEntitlementResponse) GetRequestedUsage() float64 {
	if x != nil {
		return x.RequestedUsage
	}
	return 0
}

func (x *GetMeteredEntitlementResponse) GetEntitlement() *MeteredEntitlement {
	if x != nil {
		return x.Entitlement
	}
	return nil
}

type RedisOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnvironmentPrefix string  `protobuf:"bytes,1,opt,name=environment_prefix,json=environmentPrefix,proto3" json:"environment_prefix,omitempty"`
	Host              *string `protobuf:"bytes,2,opt,name=host,proto3,oneof" json:"host,omitempty"`
	Port              *int32  `protobuf:"varint,3,opt,name=port,proto3,oneof" json:"port,omitempty"`
	Db                *int32  `protobuf:"varint,4,opt,name=db,proto3,oneof" json:"db,omitempty"`
	Username          *string `protobuf:"bytes,5,opt,name=username,proto3,oneof" json:"username,omitempty"`
	Password          *string `protobuf:"bytes,6,opt,name=password,proto3,oneof" json:"password,omitempty"`
	Ttl               *int32  `protobuf:"varint,7,opt,name=ttl,proto3,oneof" json:"ttl,omitempty"`
}

func (x *RedisOptions) Reset() {
	*x = RedisOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stigg_sidecar_v1_sidecar_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedisOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedisOptions) ProtoMessage() {}

func (x *RedisOptions) ProtoReflect() protoreflect.Message {
	mi := &file_stigg_sidecar_v1_sidecar_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedisOptions.ProtoReflect.Descriptor instead.
func (*RedisOptions) Descriptor() ([]byte, []int) {
	return file_stigg_sidecar_v1_sidecar_proto_rawDescGZIP(), []int{19}
}

func (x *RedisOptions) GetEnvironmentPrefix() string {
	if x != nil {
		return x.EnvironmentPrefix
	}
	return ""
}

func (x *RedisOptions) GetHost() string {
	if x != nil && x.Host != nil {
		return *x.Host
	}
	return ""
}

func (x *RedisOptions) GetPort() int32 {
	if x != nil && x.Port != nil {
		return *x.Port
	}
	return 0
}

func (x *RedisOptions) GetDb() int32 {
	if x != nil && x.Db != nil {
		return *x.Db
	}
	return 0
}

func (x *RedisOptions) GetUsername() string {
	if x != nil && x.Username != nil {
		return *x.Username
	}
	return ""
}

func (x *RedisOptions) GetPassword() string {
	if x != nil && x.Password != nil {
		return *x.Password
	}
	return ""
}

func (x *RedisOptions) GetTtl() int32 {
	if x != nil && x.Ttl != nil {
		return *x.Ttl
	}
	return 0
}

type EntitlementFallback struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Fallback:
	//
	//	*EntitlementFallback_Boolean
	//	*EntitlementFallback_Numeric
	//	*EntitlementFallback_Metered
	Fallback isEntitlementFallback_Fallback `protobuf_oneof:"fallback"`
}

func (x *EntitlementFallback) Reset() {
	*x = EntitlementFallback{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stigg_sidecar_v1_sidecar_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntitlementFallback) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntitlementFallback) ProtoMessage() {}

func (x *EntitlementFallback) ProtoReflect() protoreflect.Message {
	mi := &file_stigg_sidecar_v1_sidecar_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntitlementFallback.ProtoReflect.Descriptor instead.
func (*EntitlementFallback) Descriptor() ([]byte, []int) {
	return file_stigg_sidecar_v1_sidecar_proto_rawDescGZIP(), []int{20}
}

func (m *EntitlementFallback) GetFallback() isEntitlementFallback_Fallback {
	if m != nil {
		return m.Fallback
	}
	return nil
}

func (x *EntitlementFallback) GetBoolean() *BooleanEntitlementFallback {
	if x, ok := x.GetFallback().(*EntitlementFallback_Boolean); ok {
		return x.Boolean
	}
	return nil
}

func (x *EntitlementFallback) GetNumeric() *NumericEntitlementFallback {
	if x, ok := x.GetFallback().(*EntitlementFallback_Numeric); ok {
		return x.Numeric
	}
	return nil
}

func (x *EntitlementFallback) GetMetered() *MeteredEntitlementFallback {
	if x, ok := x.GetFallback().(*EntitlementFallback_Metered); ok {
		return x.Metered
	}
	return nil
}

type isEntitlementFallback_Fallback interface {
	isEntitlementFallback_Fallback()
}

type EntitlementFallback_Boolean struct {
	Boolean *BooleanEntitlementFallback `protobuf:"bytes,1,opt,name=boolean,proto3,oneof"`
}

type EntitlementFallback_Numeric struct {
	Numeric *NumericEntitlementFallback `protobuf:"bytes,2,opt,name=numeric,proto3,oneof"`
}

type EntitlementFallback_Metered struct {
	Metered *MeteredEntitlementFallback `protobuf:"bytes,3,opt,name=metered,proto3,oneof"`
}

func (*EntitlementFallback_Boolean) isEntitlementFallback_Fallback() {}

func (*EntitlementFallback_Numeric) isEntitlementFallback_Fallback() {}

func (*EntitlementFallback_Metered) isEntitlementFallback_Fallback() {}

type ApiConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiKey      string  `protobuf:"bytes,1,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
	ApiUrl      *string `protobuf:"bytes,2,opt,name=api_url,json=apiUrl,proto3,oneof" json:"api_url,omitempty"`
	EdgeEnabled *bool   `protobuf:"varint,3,opt,name=edge_enabled,json=edgeEnabled,proto3,oneof" json:"edge_enabled,omitempty"`
	EdgeApiUrl  *string `protobuf:"bytes,4,opt,name=edge_api_url,json=edgeApiUrl,proto3,oneof" json:"edge_api_url,omitempty"`
}

func (x *ApiConfig) Reset() {
	*x = ApiConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stigg_sidecar_v1_sidecar_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiConfig) ProtoMessage() {}

func (x *ApiConfig) ProtoReflect() protoreflect.Message {
	mi := &file_stigg_sidecar_v1_sidecar_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiConfig.ProtoReflect.Descriptor instead.
func (*ApiConfig) Descriptor() ([]byte, []int) {
	return file_stigg_sidecar_v1_sidecar_proto_rawDescGZIP(), []int{21}
}

func (x *ApiConfig) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

func (x *ApiConfig) GetApiUrl() string {
	if x != nil && x.ApiUrl != nil {
		return *x.ApiUrl
	}
	return ""
}

func (x *ApiConfig) GetEdgeEnabled() bool {
	if x != nil && x.EdgeEnabled != nil {
		return *x.EdgeEnabled
	}
	return false
}

func (x *ApiConfig) GetEdgeApiUrl() string {
	if x != nil && x.EdgeApiUrl != nil {
		return *x.EdgeApiUrl
	}
	return ""
}

type LocalSidecarConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WsEnabled            *bool                           `protobuf:"varint,5,opt,name=ws_enabled,json=wsEnabled,proto3,oneof" json:"ws_enabled,omitempty"`
	WsUrl                *string                         `protobuf:"bytes,6,opt,name=ws_url,json=wsUrl,proto3,oneof" json:"ws_url,omitempty"`
	Redis                *RedisOptions                   `protobuf:"bytes,7,opt,name=redis,proto3,oneof" json:"redis,omitempty"`
	EntitlementsFallback map[string]*EntitlementFallback `protobuf:"bytes,8,rep,name=entitlements_fallback,json=entitlementsFallback,proto3" json:"entitlements_fallback,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CacheMaxSizeBytes    *int64                          `protobuf:"varint,9,opt,name=cache_max_size_bytes,json=cacheMaxSizeBytes,proto3,oneof" json:"cache_max_size_bytes,omitempty"`
}

func (x *LocalSidecarConfig) Reset() {
	*x = LocalSidecarConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stigg_sidecar_v1_sidecar_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocalSidecarConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalSidecarConfig) ProtoMessage() {}

func (x *LocalSidecarConfig) ProtoReflect() protoreflect.Message {
	mi := &file_stigg_sidecar_v1_sidecar_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalSidecarConfig.ProtoReflect.Descriptor instead.
func (*LocalSidecarConfig) Descriptor() ([]byte, []int) {
	return file_stigg_sidecar_v1_sidecar_proto_rawDescGZIP(), []int{22}
}

func (x *LocalSidecarConfig) GetWsEnabled() bool {
	if x != nil && x.WsEnabled != nil {
		return *x.WsEnabled
	}
	return false
}

func (x *LocalSidecarConfig) GetWsUrl() string {
	if x != nil && x.WsUrl != nil {
		return *x.WsUrl
	}
	return ""
}

func (x *LocalSidecarConfig) GetRedis() *RedisOptions {
	if x != nil {
		return x.Redis
	}
	return nil
}

func (x *LocalSidecarConfig) GetEntitlementsFallback() map[string]*EntitlementFallback {
	if x != nil {
		return x.EntitlementsFallback
	}
	return nil
}

func (x *LocalSidecarConfig) GetCacheMaxSizeBytes() int64 {
	if x != nil && x.CacheMaxSizeBytes != nil {
		return *x.CacheMaxSizeBytes
	}
	return 0
}

type ReportUsageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerId     string               `protobuf:"bytes,1,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	ResourceId     *string              `protobuf:"bytes,2,opt,name=resource_id,json=resourceId,proto3,oneof" json:"resource_id,omitempty"`
	FeatureId      string               `protobuf:"bytes,3,opt,name=feature_id,json=featureId,proto3" json:"feature_id,omitempty"`
	Value          float64              `protobuf:"fixed64,4,opt,name=value,proto3" json:"value,omitempty"`
	UpdateBehavior *UsageUpdateBehavior `protobuf:"varint,5,opt,name=update_behavior,json=updateBehavior,proto3,enum=stigg.sidecar.v1.UsageUpdateBehavior,oneof" json:"update_behavior,omitempty"`
}

func (x *ReportUsageRequest) Reset() {
	*x = ReportUsageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stigg_sidecar_v1_sidecar_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportUsageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportUsageRequest) ProtoMessage() {}

func (x *ReportUsageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stigg_sidecar_v1_sidecar_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportUsageRequest.ProtoReflect.Descriptor instead.
func (*ReportUsageRequest) Descriptor() ([]byte, []int) {
	return file_stigg_sidecar_v1_sidecar_proto_rawDescGZIP(), []int{23}
}

func (x *ReportUsageRequest) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *ReportUsageRequest) GetResourceId() string {
	if x != nil && x.ResourceId != nil {
		return *x.ResourceId
	}
	return ""
}

func (x *ReportUsageRequest) GetFeatureId() string {
	if x != nil {
		return x.FeatureId
	}
	return ""
}

func (x *ReportUsageRequest) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *ReportUsageRequest) GetUpdateBehavior() UsageUpdateBehavior {
	if x != nil && x.UpdateBehavior != nil {
		return *x.UpdateBehavior
	}
	return UsageUpdateBehavior_USAGE_UPDATE_BEHAVIOR_UNSPECIFIED
}

type EventDimensionValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*EventDimensionValue_StringValue
	//	*EventDimensionValue_NumberValue
	//	*EventDimensionValue_BooleanValue
	Value isEventDimensionValue_Value `protobuf_oneof:"value"`
}

func (x *EventDimensionValue) Reset() {
	*x = EventDimensionValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stigg_sidecar_v1_sidecar_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventDimensionValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventDimensionValue) ProtoMessage() {}

func (x *EventDimensionValue) ProtoReflect() protoreflect.Message {
	mi := &file_stigg_sidecar_v1_sidecar_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventDimensionValue.ProtoReflect.Descriptor instead.
func (*EventDimensionValue) Descriptor() ([]byte, []int) {
	return file_stigg_sidecar_v1_sidecar_proto_rawDescGZIP(), []int{24}
}

func (m *EventDimensionValue) GetValue() isEventDimensionValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *EventDimensionValue) GetStringValue() string {
	if x, ok := x.GetValue().(*EventDimensionValue_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (x *EventDimensionValue) GetNumberValue() float64 {
	if x, ok := x.GetValue().(*EventDimensionValue_NumberValue); ok {
		return x.NumberValue
	}
	return 0
}

func (x *EventDimensionValue) GetBooleanValue() bool {
	if x, ok := x.GetValue().(*EventDimensionValue_BooleanValue); ok {
		return x.BooleanValue
	}
	return false
}

type isEventDimensionValue_Value interface {
	isEventDimensionValue_Value()
}

type EventDimensionValue_StringValue struct {
	StringValue string `protobuf:"bytes,1,opt,name=string_value,json=stringValue,proto3,oneof"`
}

type EventDimensionValue_NumberValue struct {
	NumberValue float64 `protobuf:"fixed64,2,opt,name=number_value,json=numberValue,proto3,oneof"`
}

type EventDimensionValue_BooleanValue struct {
	BooleanValue bool `protobuf:"varint,3,opt,name=boolean_value,json=booleanValue,proto3,oneof"`
}

func (*EventDimensionValue_StringValue) isEventDimensionValue_Value() {}

func (*EventDimensionValue_NumberValue) isEventDimensionValue_Value() {}

func (*EventDimensionValue_BooleanValue) isEventDimensionValue_Value() {}

type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventName      string                          `protobuf:"bytes,1,opt,name=event_name,json=eventName,proto3" json:"event_name,omitempty"`
	CustomerId     string                          `protobuf:"bytes,2,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	IdempotencyKey string                          `protobuf:"bytes,3,opt,name=idempotency_key,json=idempotencyKey,proto3" json:"idempotency_key,omitempty"`
	ResourceId     *string                         `protobuf:"bytes,4,opt,name=resource_id,json=resourceId,proto3,oneof" json:"resource_id,omitempty"`
	Dimensions     map[string]*EventDimensionValue `protobuf:"bytes,5,rep,name=dimensions,proto3" json:"dimensions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Timestamp      *timestamppb.Timestamp          `protobuf:"bytes,6,opt,name=timestamp,proto3,oneof" json:"timestamp,omitempty"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stigg_sidecar_v1_sidecar_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_stigg_sidecar_v1_sidecar_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_stigg_sidecar_v1_sidecar_proto_rawDescGZIP(), []int{25}
}

func (x *Event) GetEventName() string {
	if x != nil {
		return x.EventName
	}
	return ""
}

func (x *Event) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *Event) GetIdempotencyKey() string {
	if x != nil {
		return x.IdempotencyKey
	}
	return ""
}

func (x *Event) GetResourceId() string {
	if x != nil && x.ResourceId != nil {
		return *x.ResourceId
	}
	return ""
}

func (x *Event) GetDimensions() map[string]*EventDimensionValue {
	if x != nil {
		return x.Dimensions
	}
	return nil
}

func (x *Event) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

type ReportUsageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MeasurementId string `protobuf:"bytes,1,opt,name=measurement_id,json=measurementId,proto3" json:"measurement_id,omitempty"`
}

func (x *ReportUsageResponse) Reset() {
	*x = ReportUsageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stigg_sidecar_v1_sidecar_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportUsageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportUsageResponse) ProtoMessage() {}

func (x *ReportUsageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_stigg_sidecar_v1_sidecar_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportUsageResponse.ProtoReflect.Descriptor instead.
func (*ReportUsageResponse) Descriptor() ([]byte, []int) {
	return file_stigg_sidecar_v1_sidecar_proto_rawDescGZIP(), []int{26}
}

func (x *ReportUsageResponse) GetMeasurementId() string {
	if x != nil {
		return x.MeasurementId
	}
	return ""
}

type ReportEventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Events []*Event `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
}

func (x *ReportEventsRequest) Reset() {
	*x = ReportEventsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stigg_sidecar_v1_sidecar_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportEventsRequest) ProtoMessage() {}

func (x *ReportEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stigg_sidecar_v1_sidecar_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportEventsRequest.ProtoReflect.Descriptor instead.
func (*ReportEventsRequest) Descriptor() ([]byte, []int) {
	return file_stigg_sidecar_v1_sidecar_proto_rawDescGZIP(), []int{27}
}

func (x *ReportEventsRequest) GetEvents() []*Event {
	if x != nil {
		return x.Events
	}
	return nil
}

type ReloadEntitlementsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerId string  `protobuf:"bytes,1,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	ResourceId *string `protobuf:"bytes,2,opt,name=resource_id,json=resourceId,proto3,oneof" json:"resource_id,omitempty"`
}

func (x *ReloadEntitlementsRequest) Reset() {
	*x = ReloadEntitlementsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stigg_sidecar_v1_sidecar_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReloadEntitlementsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReloadEntitlementsRequest) ProtoMessage() {}

func (x *ReloadEntitlementsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stigg_sidecar_v1_sidecar_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReloadEntitlementsRequest.ProtoReflect.Descriptor instead.
func (*ReloadEntitlementsRequest) Descriptor() ([]byte, []int) {
	return file_stigg_sidecar_v1_sidecar_proto_rawDescGZIP(), []int{28}
}

func (x *ReloadEntitlementsRequest) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *ReloadEntitlementsRequest) GetResourceId() string {
	if x != nil && x.ResourceId != nil {
		return *x.ResourceId
	}
	return ""
}

type ReloadEntitlementsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntitledEntityExists bool `protobuf:"varint,1,opt,name=entitled_entity_exists,json=entitledEntityExists,proto3" json:"entitled_entity_exists,omitempty"`
}

func (x *ReloadEntitlementsResponse) Reset() {
	*x = ReloadEntitlementsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stigg_sidecar_v1_sidecar_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReloadEntitlementsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReloadEntitlementsResponse) ProtoMessage() {}

func (x *ReloadEntitlementsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_stigg_sidecar_v1_sidecar_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReloadEntitlementsResponse.ProtoReflect.Descriptor instead.
func (*ReloadEntitlementsResponse) Descriptor() ([]byte, []int) {
	return file_stigg_sidecar_v1_sidecar_proto_rawDescGZIP(), []int{29}
}

func (x *ReloadEntitlementsResponse) GetEntitledEntityExists() bool {
	if x != nil {
		return x.EntitledEntityExists
	}
	return false
}

var File_stigg_sidecar_v1_sidecar_proto protoreflect.FileDescriptor

var file_stigg_sidecar_v1_sidecar_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x73, 0x74, 0x69, 0x67, 0x67, 0x2f, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x2f,
	0x76, 0x31, 0x2f, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x10, 0x73, 0x74, 0x69, 0x67, 0x67, 0x2e, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x2e,
	0x76, 0x31, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x9f, 0x02, 0x0a, 0x12, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x0c, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e,
	0x73, 0x74, 0x69, 0x67, 0x67, 0x2e, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x66, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x05, 0x75, 0x6e, 0x69,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x75, 0x6e, 0x69, 0x74,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x5f, 0x70, 0x6c,
	0x75, 0x72, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x75, 0x6e,
	0x69, 0x74, 0x73, 0x50, 0x6c, 0x75, 0x72, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x0a,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1b, 0x2e, 0x73, 0x74, 0x69, 0x67, 0x67, 0x2e, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73,
	0x4d, 0x65, 0x74, 0x65, 0x72, 0x65, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x75, 0x6e, 0x69, 0x74,
	0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x5f, 0x70, 0x6c, 0x75, 0x72,
	0x61, 0x6c, 0x22, 0x65, 0x0a, 0x12, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x43, 0x0a, 0x07, 0x66, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x74, 0x69, 0x67,
	0x67, 0x2e, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x48,
	0x00, 0x52, 0x07, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xad, 0x01, 0x0a, 0x12, 0x4e, 0x75,
	0x6d, 0x65, 0x72, 0x69, 0x63, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x43, 0x0a, 0x07, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x73, 0x74, 0x69, 0x67, 0x67, 0x2e, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x07, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x75, 0x6e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x55, 0x6e, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x65, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xd6, 0x05, 0x0a, 0x12, 0x4d, 0x65,
	0x74, 0x65, 0x72, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x43, 0x0a, 0x07, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x73, 0x74, 0x69, 0x67, 0x67, 0x2e, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x07, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x48, 0x01, 0x52, 0x0a, 0x75, 0x73,
	0x61, 0x67, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x0c, 0x69,
	0x73, 0x5f, 0x75, 0x6e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x69, 0x73, 0x55, 0x6e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x12, 0x23,
	0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x50, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x73, 0x74, 0x69, 0x67,
	0x67, 0x2e, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x65, 0x74, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x48, 0x02, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x65, 0x74, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x72, 0x65,
	0x73, 0x65, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x02, 0x18, 0x01, 0x48, 0x03,
	0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x65, 0x74, 0x44, 0x61, 0x74, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x4f, 0x0a, 0x13, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x5f, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x04, 0x52, 0x11, 0x75,
	0x73, 0x61, 0x67, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72,
	0x88, 0x01, 0x01, 0x12, 0x4d, 0x0a, 0x12, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x05, 0x52, 0x10, 0x75,
	0x73, 0x61, 0x67, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x49, 0x0a, 0x10, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x06, 0x52, 0x0e, 0x75, 0x73, 0x61, 0x67,
	0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x45, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x75, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72, 0x65,
	0x73, 0x65, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x42, 0x16,
	0x0a, 0x14, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f,
	0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x13, 0x0a,
	0x11, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x65,
	0x6e, 0x64, 0x22, 0xe2, 0x01, 0x0a, 0x0b, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x40, 0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x74, 0x69, 0x67, 0x67, 0x2e, 0x73, 0x69, 0x64, 0x65,
	0x63, 0x61, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x07, 0x62, 0x6f, 0x6f,
	0x6c, 0x65, 0x61, 0x6e, 0x12, 0x40, 0x0a, 0x07, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x74, 0x69, 0x67, 0x67, 0x2e, 0x73, 0x69,
	0x64, 0x65, 0x63, 0x61, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x07, 0x6e,
	0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x12, 0x40, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x65,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x74, 0x69, 0x67, 0x67, 0x2e,
	0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x65, 0x72,
	0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x07, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x65, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x6f, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x24, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x22, 0x5c, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0c, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x74, 0x69, 0x67,
	0x67, 0x2e, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0c, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x3b, 0x0a, 0x1a, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61,
	0x6e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x61, 0x6c, 0x6c,
	0x62, 0x61, 0x63, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x61, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x68, 0x61, 0x73, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x22, 0x77, 0x0a, 0x19, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x4d, 0x0a, 0x08, 0x66, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x74, 0x69, 0x67, 0x67, 0x2e, 0x73, 0x69, 0x64, 0x65, 0x63,
	0x61, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b,
	0x48, 0x00, 0x52, 0x08, 0x66, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x88, 0x01, 0x01, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x66, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x22, 0xec, 0x01, 0x0a,
	0x1c, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a,
	0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x74, 0x69, 0x67, 0x67, 0x2e, 0x73, 0x69, 0x64,
	0x65, 0x63, 0x61, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x48, 0x01, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x9d, 0x02, 0x0a, 0x1d,
	0x47, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x68, 0x61, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x68, 0x61, 0x73, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x69, 0x73, 0x5f, 0x66, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x69, 0x73, 0x46, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x5b, 0x0a,
	0x14, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x64, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x5f, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x73, 0x74,
	0x69, 0x67, 0x67, 0x2e, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x44, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x12, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x44, 0x65, 0x6e, 0x69, 0x65,
	0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x0b, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x73, 0x74, 0x69, 0x67, 0x67, 0x2e, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x64, 0x65,
	0x6e, 0x69, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x99, 0x01, 0x0a, 0x1a,
	0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x46, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x61,
	0x73, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x68, 0x61, 0x73, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x75, 0x6e, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x0b, 0x69, 0x73,
	0x55, 0x6e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x69, 0x73, 0x5f, 0x75, 0x6e,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x22, 0x77, 0x0a, 0x19, 0x4e, 0x75, 0x6d, 0x65, 0x72,
	0x69, 0x63, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4d, 0x0a, 0x08, 0x66, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x74, 0x69, 0x67, 0x67, 0x2e, 0x73,
	0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69,
	0x63, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x61, 0x6c, 0x6c,
	0x62, 0x61, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x08, 0x66, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b,
	0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x66, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b,
	0x22, 0xec, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49,
	0x64, 0x12, 0x24, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x74, 0x69, 0x67, 0x67,
	0x2e, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x75, 0x6d, 0x65,
	0x72, 0x69, 0x63, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x01, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0x9d, 0x02, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x61, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x68, 0x61, 0x73, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x66, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x46, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63,
	0x6b, 0x12, 0x5b, 0x0a, 0x14, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x64, 0x65, 0x6e, 0x69,
	0x65, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x24, 0x2e, 0x73, 0x74, 0x69, 0x67, 0x67, 0x2e, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x44, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x12, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x44,
	0x65, 0x6e, 0x69, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x46,
	0x0a, 0x0b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x74, 0x69, 0x67, 0x67, 0x2e, 0x73, 0x69, 0x64, 0x65,
	0x63, 0x61, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x64, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22,
	0xaa, 0x01, 0x0a, 0x1a, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x1d,
	0x0a, 0x0a, 0x68, 0x61, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x68, 0x61, 0x73, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x24, 0x0a,
	0x0b, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x48, 0x00, 0x52, 0x0a, 0x75, 0x73, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x75, 0x6e, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x0b, 0x69, 0x73, 0x55,
	0x6e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x69, 0x73, 0x5f, 0x75, 0x6e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x22, 0xb9, 0x01, 0x0a,
	0x19, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2c, 0x0a, 0x0f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4d, 0x0a, 0x08, 0x66, 0x61, 0x6c, 0x6c,
	0x62, 0x61, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x74, 0x69,
	0x67, 0x67, 0x2e, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65,
	0x74, 0x65, 0x72, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x46, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x48, 0x01, 0x52, 0x08, 0x66, 0x61, 0x6c, 0x6c,
	0x62, 0x61, 0x63, 0x6b, 0x88, 0x01, 0x01, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x66, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x22, 0xec, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74,
	0x4d, 0x65, 0x74, 0x65, 0x72, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0b, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x4a, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x73, 0x74, 0x69, 0x67, 0x67, 0x2e, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x01, 0x52,
	0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xc6, 0x02, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x4d,
	0x65, 0x74, 0x65, 0x72, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x61, 0x73,
	0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x68,
	0x61, 0x73, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x66,
	0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69,
	0x73, 0x46, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x5b, 0x0a, 0x14, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x64, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x73, 0x74, 0x69, 0x67, 0x67, 0x2e,
	0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x44, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x12, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x44, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x46, 0x0a, 0x0b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x74, 0x69, 0x67, 0x67, 0x2e, 0x73, 0x69, 0x64,
	0x65, 0x63, 0x61, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x65, 0x64, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x64, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x22, 0x98, 0x02, 0x0a, 0x0c, 0x52, 0x65, 0x64, 0x69, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x2d, 0x0a, 0x12, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x65,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x12, 0x17, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x64, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02,
	0x52, 0x02, 0x64, 0x62, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x74, 0x74, 0x6c,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x48, 0x05, 0x52, 0x03, 0x74, 0x74, 0x6c, 0x88, 0x01, 0x01,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x70, 0x6f,
	0x72, 0x74, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x64, 0x62, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x74, 0x74, 0x6c, 0x22, 0xff, 0x01, 0x0a, 0x13,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x61, 0x6c, 0x6c, 0x62,
	0x61, 0x63, 0x6b, 0x12, 0x48, 0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x74, 0x69, 0x67, 0x67, 0x2e, 0x73, 0x69, 0x64,
	0x65, 0x63, 0x61, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x61, 0x6c, 0x6c, 0x62, 0x61,
	0x63, 0x6b, 0x48, 0x00, 0x52, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x12, 0x48, 0x0a,
	0x07, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x73, 0x74, 0x69, 0x67, 0x67, 0x2e, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x46, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x07,
	0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x12, 0x48, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x74, 0x69, 0x67, 0x67,
	0x2e, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x65,
	0x72, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x61,
	0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x65,
	0x64, 0x42, 0x0a, 0x0a, 0x08, 0x66, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x22, 0xbf, 0x01,
	0x0a, 0x09, 0x41, 0x70, 0x69, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x61,
	0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70,
	0x69, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x61, 0x70, 0x69, 0x55, 0x72, 0x6c, 0x88,
	0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x0b, 0x65, 0x64, 0x67, 0x65,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c, 0x65, 0x64,
	0x67, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x02, 0x52, 0x0a, 0x65, 0x64, 0x67, 0x65, 0x41, 0x70, 0x69, 0x55, 0x72, 0x6c, 0x88, 0x01,
	0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x75, 0x72, 0x6c, 0x22,
	0xe7, 0x03, 0x0a, 0x12, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x22, 0x0a, 0x0a, 0x77, 0x73, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x09, 0x77, 0x73,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x77, 0x73,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x77, 0x73,
	0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x05, 0x72, 0x65, 0x64, 0x69, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x74, 0x69, 0x67, 0x67, 0x2e, 0x73, 0x69,
	0x64, 0x65, 0x63, 0x61, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x73, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x02, 0x52, 0x05, 0x72, 0x65, 0x64, 0x69, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x73, 0x0a, 0x15, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x5f, 0x66, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x3e, 0x2e, 0x73, 0x74, 0x69, 0x67, 0x67, 0x2e, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x46, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x14, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x46, 0x61,
	0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x34, 0x0a, 0x14, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f,
	0x6d, 0x61, 0x78, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x03, 0x48, 0x03, 0x52, 0x11, 0x63, 0x61, 0x63, 0x68, 0x65, 0x4d, 0x61, 0x78,
	0x53, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x88, 0x01, 0x01, 0x1a, 0x6e, 0x0a, 0x19,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x46, 0x61, 0x6c, 0x6c,
	0x62, 0x61, 0x63, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3b, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x74, 0x69,
	0x67, 0x67, 0x2e, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63,
	0x6b, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x77, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x77, 0x73, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x72, 0x65, 0x64, 0x69, 0x73,
	0x42, 0x17, 0x0a, 0x15, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x22, 0x89, 0x02, 0x0a, 0x12, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x24, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x53, 0x0a, 0x0f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x73, 0x74, 0x69, 0x67, 0x67, 0x2e, 0x73, 0x69,
	0x64, 0x65, 0x63, 0x61, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x48, 0x01, 0x52, 0x0e,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x88, 0x01,
	0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x65, 0x68,
	0x61, 0x76, 0x69, 0x6f, 0x72, 0x22, 0x8f, 0x01, 0x0a, 0x13, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44,
	0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a,
	0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x0b, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x25, 0x0a, 0x0d, 0x62, 0x6f, 0x6f, 0x6c, 0x65,
	0x61, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00,
	0x52, 0x0c, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x07,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xa2, 0x03, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x64, 0x65, 0x6d, 0x70, 0x6f, 0x74, 0x65, 0x6e, 0x63, 0x79,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x64, 0x65, 0x6d,
	0x70, 0x6f, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x0b, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x47, 0x0a, 0x0a, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x74, 0x69, 0x67, 0x67, 0x2e, 0x73, 0x69, 0x64,
	0x65, 0x63, 0x61, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x69,
	0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x64,
	0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3d, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x01, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x88, 0x01, 0x01, 0x1a, 0x64, 0x0a, 0x0f, 0x44, 0x69, 0x6d, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3b, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73,
	0x74, 0x69, 0x67, 0x67, 0x2e, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x3c, 0x0a, 0x13,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x46, 0x0a, 0x13, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2f, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x73, 0x74, 0x69, 0x67, 0x67, 0x2e, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x22, 0x72, 0x0a, 0x19, 0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x24, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x22, 0x52, 0x0a, 0x1a, 0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x64,
	0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x64, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x2a, 0xc6, 0x03, 0x0a, 0x12, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x44, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x12, 0x24, 0x0a, 0x20, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x44, 0x45, 0x4e, 0x49,
	0x45, 0x44, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x41, 0x43, 0x43, 0x45, 0x53,
	0x53, 0x5f, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x01, 0x12, 0x2d, 0x0a, 0x29, 0x41, 0x43, 0x43,
	0x45, 0x53, 0x53, 0x5f, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f,
	0x4e, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x45, 0x52, 0x5f, 0x49, 0x53, 0x5f, 0x41, 0x52,
	0x43, 0x48, 0x49, 0x56, 0x45, 0x44, 0x10, 0x02, 0x12, 0x2b, 0x0a, 0x27, 0x41, 0x43, 0x43, 0x45,
	0x53, 0x53, 0x5f, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e,
	0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f,
	0x55, 0x4e, 0x44, 0x10, 0x03, 0x12, 0x34, 0x0a, 0x30, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f,
	0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x43, 0x55,
	0x53, 0x54, 0x4f, 0x4d, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x04, 0x12, 0x2a, 0x0a, 0x26, 0x41,
	0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x41,
	0x53, 0x4f, 0x4e, 0x5f, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x05, 0x12, 0x2f, 0x0a, 0x2b, 0x41, 0x43, 0x43, 0x45, 0x53,
	0x53, 0x5f, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f,
	0x4e, 0x4f, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52,
	0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x06, 0x12, 0x3f, 0x0a, 0x3b, 0x41, 0x43, 0x43, 0x45,
	0x53, 0x53, 0x5f, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e,
	0x5f, 0x4e, 0x4f, 0x5f, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x45, 0x4e, 0x54, 0x49,
	0x54, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x4e, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43,
	0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x07, 0x12, 0x38, 0x0a, 0x34, 0x41, 0x43, 0x43,
	0x45, 0x53, 0x53, 0x5f, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f,
	0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x45, 0x44, 0x5f, 0x55, 0x53, 0x41, 0x47,
	0x45, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x4c, 0x49, 0x4d, 0x49,
	0x54, 0x10, 0x08, 0x2a, 0x5e, 0x0a, 0x0b, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x18, 0x0a, 0x14, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x42, 0x4f, 0x4f, 0x4c, 0x45, 0x41, 0x4e, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x45,
	0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45,
	0x52, 0x10, 0x02, 0x2a, 0x74, 0x0a, 0x09, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f,
	0x4d, 0x45, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10,
	0x01, 0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x46, 0x4c, 0x55, 0x43, 0x54, 0x55, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x1a, 0x0a,
	0x16, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x43, 0x52,
	0x45, 0x4d, 0x45, 0x4e, 0x54, 0x41, 0x4c, 0x10, 0x03, 0x2a, 0xf1, 0x01, 0x0a, 0x16, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x65, 0x74, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x12, 0x28, 0x0a, 0x24, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x4c, 0x45, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x20,
	0x0a, 0x1c, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45,
	0x53, 0x45, 0x54, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f, 0x44, 0x41, 0x59, 0x10, 0x01,
	0x12, 0x21, 0x0a, 0x1d, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f, 0x48, 0x4f, 0x55,
	0x52, 0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x4c, 0x45, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f,
	0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x10, 0x03, 0x12, 0x21, 0x0a, 0x1d, 0x45, 0x4e, 0x54, 0x49, 0x54,
	0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x50, 0x45, 0x52,
	0x49, 0x4f, 0x44, 0x5f, 0x57, 0x45, 0x45, 0x4b, 0x10, 0x04, 0x12, 0x21, 0x0a, 0x1d, 0x45, 0x4e,
	0x54, 0x49, 0x54, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f,
	0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f, 0x59, 0x45, 0x41, 0x52, 0x10, 0x05, 0x2a, 0x7c, 0x0a,
	0x13, 0x55, 0x73, 0x61, 0x67, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x65, 0x68, 0x61,
	0x76, 0x69, 0x6f, 0x72, 0x12, 0x25, 0x0a, 0x21, 0x55, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x55, 0x50,
	0x44, 0x41, 0x54, 0x45, 0x5f, 0x42, 0x45, 0x48, 0x41, 0x56, 0x49, 0x4f, 0x52, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x55,
	0x53, 0x41, 0x47, 0x45, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x42, 0x45, 0x48, 0x41,
	0x56, 0x49, 0x4f, 0x52, 0x5f, 0x44, 0x45, 0x4c, 0x54, 0x41, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19,
	0x55, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x42, 0x45, 0x48,
	0x41, 0x56, 0x49, 0x4f, 0x52, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x02, 0x32, 0x82, 0x06, 0x0a, 0x0e,
	0x53, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x66,
	0x0a, 0x0f, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x28, 0x2e, 0x73, 0x74, 0x69, 0x67, 0x67, 0x2e, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x73, 0x74,
	0x69, 0x67, 0x67, 0x2e, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x78, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x6f,
	0x6c, 0x65, 0x61, 0x6e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x2e, 0x2e, 0x73, 0x74, 0x69, 0x67, 0x67, 0x2e, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2f, 0x2e, 0x73, 0x74, 0x69, 0x67, 0x67, 0x2e, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x78, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2e, 0x2e, 0x73, 0x74, 0x69, 0x67,
	0x67, 0x2e, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x73, 0x74, 0x69, 0x67,
	0x67, 0x2e, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x78, 0x0a, 0x15, 0x47, 0x65,
	0x74, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x2e, 0x2e, 0x73, 0x74, 0x69, 0x67, 0x67, 0x2e, 0x73, 0x69, 0x64, 0x65,
	0x63, 0x61, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x65,
	0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x73, 0x74, 0x69, 0x67, 0x67, 0x2e, 0x73, 0x69, 0x64, 0x65,
	0x63, 0x61, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x65,
	0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x0b, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x24, 0x2e, 0x73, 0x74, 0x69, 0x67, 0x67, 0x2e, 0x73, 0x69, 0x64, 0x65,
	0x63, 0x61, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x55, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x73, 0x74, 0x69, 0x67,
	0x67, 0x2e, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x4d, 0x0a, 0x0c, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x25, 0x2e, 0x73, 0x74, 0x69, 0x67, 0x67, 0x2e, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x6f, 0x0a, 0x12, 0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2b, 0x2e, 0x73, 0x74, 0x69, 0x67, 0x67, 0x2e, 0x73, 0x69,
	0x64, 0x65, 0x63, 0x61, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x73, 0x74, 0x69, 0x67, 0x67, 0x2e, 0x73, 0x69, 0x64, 0x65, 0x63,
	0x61, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x42, 0xd3, 0x01, 0x0a, 0x19, 0x69, 0x6f, 0x2e, 0x73, 0x74, 0x69, 0x67, 0x67, 0x2e, 0x73, 0x69,
	0x64, 0x65, 0x63, 0x61, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x42, 0x0c,
	0x53, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x46,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x74, 0x69, 0x67, 0x67,
	0x69, 0x6f, 0x2f, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x2d, 0x73, 0x64, 0x6b, 0x2d, 0x67,
	0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2f, 0x73, 0x74, 0x69, 0x67,
	0x67, 0x2f, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x2f, 0x76, 0x31, 0x3b, 0x73, 0x69, 0x64,
	0x65, 0x63, 0x61, 0x72, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x53, 0x53, 0x58, 0xaa, 0x02, 0x10, 0x53,
	0x74, 0x69, 0x67, 0x67, 0x2e, 0x53, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x2e, 0x56, 0x31, 0xca,
	0x02, 0x10, 0x53, 0x74, 0x69, 0x67, 0x67, 0x5c, 0x53, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x5c,
	0x56, 0x31, 0xe2, 0x02, 0x1c, 0x53, 0x74, 0x69, 0x67, 0x67, 0x5c, 0x53, 0x69, 0x64, 0x65, 0x63,
	0x61, 0x72, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0xea, 0x02, 0x12, 0x53, 0x74, 0x69, 0x67, 0x67, 0x3a, 0x3a, 0x53, 0x69, 0x64, 0x65, 0x63,
	0x61, 0x72, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_stigg_sidecar_v1_sidecar_proto_rawDescOnce sync.Once
	file_stigg_sidecar_v1_sidecar_proto_rawDescData = file_stigg_sidecar_v1_sidecar_proto_rawDesc
)

func file_stigg_sidecar_v1_sidecar_proto_rawDescGZIP() []byte {
	file_stigg_sidecar_v1_sidecar_proto_rawDescOnce.Do(func() {
		file_stigg_sidecar_v1_sidecar_proto_rawDescData = protoimpl.X.CompressGZIP(file_stigg_sidecar_v1_sidecar_proto_rawDescData)
	})
	return file_stigg_sidecar_v1_sidecar_proto_rawDescData
}

var file_stigg_sidecar_v1_sidecar_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_stigg_sidecar_v1_sidecar_proto_msgTypes = make([]protoimpl.MessageInfo, 32)
var file_stigg_sidecar_v1_sidecar_proto_goTypes = []any{
	(AccessDeniedReason)(0),               // 0: stigg.sidecar.v1.AccessDeniedReason
	(FeatureType)(0),                      // 1: stigg.sidecar.v1.FeatureType
	(MeterType)(0),                        // 2: stigg.sidecar.v1.MeterType
	(EntitlementResetPeriod)(0),           // 3: stigg.sidecar.v1.EntitlementResetPeriod
	(UsageUpdateBehavior)(0),              // 4: stigg.sidecar.v1.UsageUpdateBehavior
	(*EntitlementFeature)(nil),            // 5: stigg.sidecar.v1.EntitlementFeature
	(*BooleanEntitlement)(nil),            // 6: stigg.sidecar.v1.BooleanEntitlement
	(*NumericEntitlement)(nil),            // 7: stigg.sidecar.v1.NumericEntitlement
	(*MeteredEntitlement)(nil),            // 8: stigg.sidecar.v1.MeteredEntitlement
	(*Entitlement)(nil),                   // 9: stigg.sidecar.v1.Entitlement
	(*GetEntitlementsRequest)(nil),        // 10: stigg.sidecar.v1.GetEntitlementsRequest
	(*GetEntitlementsResponse)(nil),       // 11: stigg.sidecar.v1.GetEntitlementsResponse
	(*BooleanEntitlementFallback)(nil),    // 12: stigg.sidecar.v1.BooleanEntitlementFallback
	(*BooleanEntitlementOptions)(nil),     // 13: stigg.sidecar.v1.BooleanEntitlementOptions
	(*GetBooleanEntitlementRequest)(nil),  // 14: stigg.sidecar.v1.GetBooleanEntitlementRequest
	(*GetBooleanEntitlementResponse)(nil), // 15: stigg.sidecar.v1.GetBooleanEntitlementResponse
	(*NumericEntitlementFallback)(nil),    // 16: stigg.sidecar.v1.NumericEntitlementFallback
	(*NumericEntitlementOptions)(nil),     // 17: stigg.sidecar.v1.NumericEntitlementOptions
	(*GetNumericEntitlementRequest)(nil),  // 18: stigg.sidecar.v1.GetNumericEntitlementRequest
	(*GetNumericEntitlementResponse)(nil), // 19: stigg.sidecar.v1.GetNumericEntitlementResponse
	(*MeteredEntitlementFallback)(nil),    // 20: stigg.sidecar.v1.MeteredEntitlementFallback
	(*MeteredEntitlementOptions)(nil),     // 21: stigg.sidecar.v1.MeteredEntitlementOptions
	(*GetMeteredEntitlementRequest)(nil),  // 22: stigg.sidecar.v1.GetMeteredEntitlementRequest
	(*GetMeteredEntitlementResponse)(nil), // 23: stigg.sidecar.v1.GetMeteredEntitlementResponse
	(*RedisOptions)(nil),                  // 24: stigg.sidecar.v1.RedisOptions
	(*EntitlementFallback)(nil),           // 25: stigg.sidecar.v1.EntitlementFallback
	(*ApiConfig)(nil),                     // 26: stigg.sidecar.v1.ApiConfig
	(*LocalSidecarConfig)(nil),            // 27: stigg.sidecar.v1.LocalSidecarConfig
	(*ReportUsageRequest)(nil),            // 28: stigg.sidecar.v1.ReportUsageRequest
	(*EventDimensionValue)(nil),           // 29: stigg.sidecar.v1.EventDimensionValue
	(*Event)(nil),                         // 30: stigg.sidecar.v1.Event
	(*ReportUsageResponse)(nil),           // 31: stigg.sidecar.v1.ReportUsageResponse
	(*ReportEventsRequest)(nil),           // 32: stigg.sidecar.v1.ReportEventsRequest
	(*ReloadEntitlementsRequest)(nil),     // 33: stigg.sidecar.v1.ReloadEntitlementsRequest
	(*ReloadEntitlementsResponse)(nil),    // 34: stigg.sidecar.v1.ReloadEntitlementsResponse
	nil,                                   // 35: stigg.sidecar.v1.LocalSidecarConfig.EntitlementsFallbackEntry
	nil,                                   // 36: stigg.sidecar.v1.Event.DimensionsEntry
	(*timestamppb.Timestamp)(nil),         // 37: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),                 // 38: google.protobuf.Empty
}
var file_stigg_sidecar_v1_sidecar_proto_depIdxs = []int32{
	1,  // 0: stigg.sidecar.v1.EntitlementFeature.feature_type:type_name -> stigg.sidecar.v1.FeatureType
	2,  // 1: stigg.sidecar.v1.EntitlementFeature.meter_type:type_name -> stigg.sidecar.v1.MeterType
	5,  // 2: stigg.sidecar.v1.BooleanEntitlement.feature:type_name -> stigg.sidecar.v1.EntitlementFeature
	5,  // 3: stigg.sidecar.v1.NumericEntitlement.feature:type_name -> stigg.sidecar.v1.EntitlementFeature
	5,  // 4: stigg.sidecar.v1.MeteredEntitlement.feature:type_name -> stigg.sidecar.v1.EntitlementFeature
	3,  // 5: stigg.sidecar.v1.MeteredEntitlement.reset_period:type_name -> stigg.sidecar.v1.EntitlementResetPeriod
	37, // 6: stigg.sidecar.v1.MeteredEntitlement.next_reset_date:type_name -> google.protobuf.Timestamp
	37, // 7: stigg.sidecar.v1.MeteredEntitlement.usage_period_anchor:type_name -> google.protobuf.Timestamp
	37, // 8: stigg.sidecar.v1.MeteredEntitlement.usage_period_start:type_name -> google.protobuf.Timestamp
	37, // 9: stigg.sidecar.v1.MeteredEntitlement.usage_period_end:type_name -> google.protobuf.Timestamp
	6,  // 10: stigg.sidecar.v1.Entitlement.boolean:type_name -> stigg.sidecar.v1.BooleanEntitlement
	7,  // 11: stigg.sidecar.v1.Entitlement.numeric:type_name -> stigg.sidecar.v1.NumericEntitlement
	8,  // 12: stigg.sidecar.v1.Entitlement.metered:type_name -> stigg.sidecar.v1.MeteredEntitlement
	9,  // 13: stigg.sidecar.v1.GetEntitlementsResponse.entitlements:type_name -> stigg.sidecar.v1.Entitlement
	12, // 14: stigg.sidecar.v1.BooleanEntitlementOptions.fallback:type_name -> stigg.sidecar.v1.BooleanEntitlementFallback
	13, // 15: stigg.sidecar.v1.GetBooleanEntitlementRequest.options:type_name -> stigg.sidecar.v1.BooleanEntitlementOptions
	0,  // 16: stigg.sidecar.v1.GetBooleanEntitlementResponse.access_denied_reason:type_name -> stigg.sidecar.v1.AccessDeniedReason
	6,  // 17: stigg.sidecar.v1.GetBooleanEntitlementResponse.entitlement:type_name -> stigg.sidecar.v1.BooleanEntitlement
	16, // 18: stigg.sidecar.v1.NumericEntitlementOptions.fallback:type_name -> stigg.sidecar.v1.NumericEntitlementFallback
	17, // 19: stigg.sidecar.v1.GetNumericEntitlementRequest.options:type_name -> stigg.sidecar.v1.NumericEntitlementOptions
	0,  // 20: stigg.sidecar.v1.GetNumericEntitlementResponse.access_denied_reason:type_name -> stigg.sidecar.v1.AccessDeniedReason
	7,  // 21: stigg.sidecar.v1.GetNumericEntitlementResponse.entitlement:type_name -> stigg.sidecar.v1.NumericEntitlement
	20, // 22: stigg.sidecar.v1.MeteredEntitlementOptions.fallback:type_name -> stigg.sidecar.v1.MeteredEntitlementFallback
	21, // 23: stigg.sidecar.v1.GetMeteredEntitlementRequest.options:type_name -> stigg.sidecar.v1.MeteredEntitlementOptions
	0,  // 24: stigg.sidecar.v1.GetMeteredEntitlementResponse.access_denied_reason:type_name -> stigg.sidecar.v1.AccessDeniedReason
	8,  // 25: stigg.sidecar.v1.GetMeteredEntitlementResponse.entitlement:type_name -> stigg.sidecar.v1.MeteredEntitlement
	12, // 26: stigg.sidecar.v1.EntitlementFallback.boolean:type_name -> stigg.sidecar.v1.BooleanEntitlementFallback
	16, // 27: stigg.sidecar.v1.EntitlementFallback.numeric:type_name -> stigg.sidecar.v1.NumericEntitlementFallback
	20, // 28: stigg.sidecar.v1.EntitlementFallback.metered:type_name -> stigg.sidecar.v1.MeteredEntitlementFallback
	24, // 29: stigg.sidecar.v1.LocalSidecarConfig.redis:type_name -> stigg.sidecar.v1.RedisOptions
	35, // 30: stigg.sidecar.v1.LocalSidecarConfig.entitlements_fallback:type_name -> stigg.sidecar.v1.LocalSidecarConfig.EntitlementsFallbackEntry
	4,  // 31: stigg.sidecar.v1.ReportUsageRequest.update_behavior:type_name -> stigg.sidecar.v1.UsageUpdateBehavior
	36, // 32: stigg.sidecar.v1.Event.dimensions:type_name -> stigg.sidecar.v1.Event.DimensionsEntry
	37, // 33: stigg.sidecar.v1.Event.timestamp:type_name -> google.protobuf.Timestamp
	30, // 34: stigg.sidecar.v1.ReportEventsRequest.events:type_name -> stigg.sidecar.v1.Event
	25, // 35: stigg.sidecar.v1.LocalSidecarConfig.EntitlementsFallbackEntry.value:type_name -> stigg.sidecar.v1.EntitlementFallback
	29, // 36: stigg.sidecar.v1.Event.DimensionsEntry.value:type_name -> stigg.sidecar.v1.EventDimensionValue
	10, // 37: stigg.sidecar.v1.SidecarService.GetEntitlements:input_type -> stigg.sidecar.v1.GetEntitlementsRequest
	14, // 38: stigg.sidecar.v1.SidecarService.GetBooleanEntitlement:input_type -> stigg.sidecar.v1.GetBooleanEntitlementRequest
	18, // 39: stigg.sidecar.v1.SidecarService.GetNumericEntitlement:input_type -> stigg.sidecar.v1.GetNumericEntitlementRequest
	22, // 40: stigg.sidecar.v1.SidecarService.GetMeteredEntitlement:input_type -> stigg.sidecar.v1.GetMeteredEntitlementRequest
	28, // 41: stigg.sidecar.v1.SidecarService.ReportUsage:input_type -> stigg.sidecar.v1.ReportUsageRequest
	32, // 42: stigg.sidecar.v1.SidecarService.ReportEvents:input_type -> stigg.sidecar.v1.ReportEventsRequest
	33, // 43: stigg.sidecar.v1.SidecarService.ReloadEntitlements:input_type -> stigg.sidecar.v1.ReloadEntitlementsRequest
	11, // 44: stigg.sidecar.v1.SidecarService.GetEntitlements:output_type -> stigg.sidecar.v1.GetEntitlementsResponse
	15, // 45: stigg.sidecar.v1.SidecarService.GetBooleanEntitlement:output_type -> stigg.sidecar.v1.GetBooleanEntitlementResponse
	19, // 46: stigg.sidecar.v1.SidecarService.GetNumericEntitlement:output_type -> stigg.sidecar.v1.GetNumericEntitlementResponse
	23, // 47: stigg.sidecar.v1.SidecarService.GetMeteredEntitlement:output_type -> stigg.sidecar.v1.GetMeteredEntitlementResponse
	31, // 48: stigg.sidecar.v1.SidecarService.ReportUsage:output_type -> stigg.sidecar.v1.ReportUsageResponse
	38, // 49: stigg.sidecar.v1.SidecarService.ReportEvents:output_type -> google.protobuf.Empty
	34, // 50: stigg.sidecar.v1.SidecarService.ReloadEntitlements:output_type -> stigg.sidecar.v1.ReloadEntitlementsResponse
	44, // [44:51] is the sub-list for method output_type
	37, // [37:44] is the sub-list for method input_type
	37, // [37:37] is the sub-list for extension type_name
	37, // [37:37] is the sub-list for extension extendee
	0,  // [0:37] is the sub-list for field type_name
}

func init() { file_stigg_sidecar_v1_sidecar_proto_init() }
func file_stigg_sidecar_v1_sidecar_proto_init() {
	if File_stigg_sidecar_v1_sidecar_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_stigg_sidecar_v1_sidecar_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*EntitlementFeature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stigg_sidecar_v1_sidecar_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*BooleanEntitlement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stigg_sidecar_v1_sidecar_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*NumericEntitlement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stigg_sidecar_v1_sidecar_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*MeteredEntitlement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stigg_sidecar_v1_sidecar_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*Entitlement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stigg_sidecar_v1_sidecar_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*GetEntitlementsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stigg_sidecar_v1_sidecar_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*GetEntitlementsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stigg_sidecar_v1_sidecar_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*BooleanEntitlementFallback); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stigg_sidecar_v1_sidecar_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*BooleanEntitlementOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stigg_sidecar_v1_sidecar_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*GetBooleanEntitlementRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stigg_sidecar_v1_sidecar_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*GetBooleanEntitlementResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stigg_sidecar_v1_sidecar_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*NumericEntitlementFallback); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stigg_sidecar_v1_sidecar_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*NumericEntitlementOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stigg_sidecar_v1_sidecar_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*GetNumericEntitlementRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stigg_sidecar_v1_sidecar_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*GetNumericEntitlementResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stigg_sidecar_v1_sidecar_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*MeteredEntitlementFallback); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stigg_sidecar_v1_sidecar_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*MeteredEntitlementOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stigg_sidecar_v1_sidecar_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*GetMeteredEntitlementRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stigg_sidecar_v1_sidecar_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*GetMeteredEntitlementResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stigg_sidecar_v1_sidecar_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*RedisOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stigg_sidecar_v1_sidecar_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*EntitlementFallback); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stigg_sidecar_v1_sidecar_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*ApiConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stigg_sidecar_v1_sidecar_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*LocalSidecarConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stigg_sidecar_v1_sidecar_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*ReportUsageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stigg_sidecar_v1_sidecar_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*EventDimensionValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stigg_sidecar_v1_sidecar_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stigg_sidecar_v1_sidecar_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*ReportUsageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stigg_sidecar_v1_sidecar_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*ReportEventsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stigg_sidecar_v1_sidecar_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*ReloadEntitlementsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stigg_sidecar_v1_sidecar_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*ReloadEntitlementsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_stigg_sidecar_v1_sidecar_proto_msgTypes[0].OneofWrappers = []any{}
	file_stigg_sidecar_v1_sidecar_proto_msgTypes[1].OneofWrappers = []any{}
	file_stigg_sidecar_v1_sidecar_proto_msgTypes[2].OneofWrappers = []any{}
	file_stigg_sidecar_v1_sidecar_proto_msgTypes[3].OneofWrappers = []any{}
	file_stigg_sidecar_v1_sidecar_proto_msgTypes[4].OneofWrappers = []any{
		(*Entitlement_Boolean)(nil),
		(*Entitlement_Numeric)(nil),
		(*Entitlement_Metered)(nil),
	}
	file_stigg_sidecar_v1_sidecar_proto_msgTypes[5].OneofWrappers = []any{}
	file_stigg_sidecar_v1_sidecar_proto_msgTypes[8].OneofWrappers = []any{}
	file_stigg_sidecar_v1_sidecar_proto_msgTypes[9].OneofWrappers = []any{}
	file_stigg_sidecar_v1_sidecar_proto_msgTypes[10].OneofWrappers = []any{}
	file_stigg_sidecar_v1_sidecar_proto_msgTypes[11].OneofWrappers = []any{}
	file_stigg_sidecar_v1_sidecar_proto_msgTypes[12].OneofWrappers = []any{}
	file_stigg_sidecar_v1_sidecar_proto_msgTypes[13].OneofWrappers = []any{}
	file_stigg_sidecar_v1_sidecar_proto_msgTypes[14].OneofWrappers = []any{}
	file_stigg_sidecar_v1_sidecar_proto_msgTypes[15].OneofWrappers = []any{}
	file_stigg_sidecar_v1_sidecar_proto_msgTypes[16].OneofWrappers = []any{}
	file_stigg_sidecar_v1_sidecar_proto_msgTypes[17].OneofWrappers = []any{}
	file_stigg_sidecar_v1_sidecar_proto_msgTypes[18].OneofWrappers = []any{}
	file_stigg_sidecar_v1_sidecar_proto_msgTypes[19].OneofWrappers = []any{}
	file_stigg_sidecar_v1_sidecar_proto_msgTypes[20].OneofWrappers = []any{
		(*EntitlementFallback_Boolean)(nil),
		(*EntitlementFallback_Numeric)(nil),
		(*EntitlementFallback_Metered)(nil),
	}
	file_stigg_sidecar_v1_sidecar_proto_msgTypes[21].OneofWrappers = []any{}
	file_stigg_sidecar_v1_sidecar_proto_msgTypes[22].OneofWrappers = []any{}
	file_stigg_sidecar_v1_sidecar_proto_msgTypes[23].OneofWrappers = []any{}
	file_stigg_sidecar_v1_sidecar_proto_msgTypes[24].OneofWrappers = []any{
		(*EventDimensionValue_StringValue)(nil),
		(*EventDimensionValue_NumberValue)(nil),
		(*EventDimensionValue_BooleanValue)(nil),
	}
	file_stigg_sidecar_v1_sidecar_proto_msgTypes[25].OneofWrappers = []any{}
	file_stigg_sidecar_v1_sidecar_proto_msgTypes[28].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_stigg_sidecar_v1_sidecar_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   32,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_stigg_sidecar_v1_sidecar_proto_goTypes,
		DependencyIndexes: file_stigg_sidecar_v1_sidecar_proto_depIdxs,
		EnumInfos:         file_stigg_sidecar_v1_sidecar_proto_enumTypes,
		MessageInfos:      file_stigg_sidecar_v1_sidecar_proto_msgTypes,
	}.Build()
	File_stigg_sidecar_v1_sidecar_proto = out.File
	file_stigg_sidecar_v1_sidecar_proto_rawDesc = nil
	file_stigg_sidecar_v1_sidecar_proto_goTypes = nil
	file_stigg_sidecar_v1_sidecar_proto_depIdxs = nil
}
